                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.3 #11866 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _timer0
                                     12 	.globl _main
                                     13 	.globl _second
                                     14 	.globl _GetKeyboard
                                     15 	.globl _SetLedBar
                                     16 	.globl _init_interrupts
                                     17 	.globl _LCD_Init
                                     18 	.globl _LCD_SendData
                                     19 	.globl _LCD_SendCmd
                                     20 	.globl _LCD_State
                                     21 	.globl _Pause
                                     22 	.globl _Delay
                                     23 	.globl _printf
                                     24 	.globl _KEY_R_4
                                     25 	.globl _KEY_R_3
                                     26 	.globl _KEY_R_2
                                     27 	.globl _KEY_R_1
                                     28 	.globl _KEY_C_4
                                     29 	.globl _KEY_C_3
                                     30 	.globl _KEY_C_2
                                     31 	.globl _KEY_C_1
                                     32 	.globl _LB_OE
                                     33 	.globl _LB_RCK
                                     34 	.globl _LB_SCL
                                     35 	.globl _LB_SCK
                                     36 	.globl _LB_Data
                                     37 	.globl _ZAR
                                     38 	.globl _SMT
                                     39 	.globl _POT
                                     40 	.globl _LED3
                                     41 	.globl _LED2
                                     42 	.globl _LED1
                                     43 	.globl _Buzzer
                                     44 	.globl _Tlac2
                                     45 	.globl _Tlac1
                                     46 	.globl _CY
                                     47 	.globl _AC
                                     48 	.globl _F0
                                     49 	.globl _RS1
                                     50 	.globl _RS0
                                     51 	.globl _OV
                                     52 	.globl _F1
                                     53 	.globl _P
                                     54 	.globl _PS
                                     55 	.globl _PT1
                                     56 	.globl _PX1
                                     57 	.globl _PT0
                                     58 	.globl _PX0
                                     59 	.globl _RD
                                     60 	.globl _WR
                                     61 	.globl _T1
                                     62 	.globl _T0
                                     63 	.globl _INT1
                                     64 	.globl _INT0
                                     65 	.globl _TXD
                                     66 	.globl _RXD
                                     67 	.globl _P3_7
                                     68 	.globl _P3_6
                                     69 	.globl _P3_5
                                     70 	.globl _P3_4
                                     71 	.globl _P3_3
                                     72 	.globl _P3_2
                                     73 	.globl _P3_1
                                     74 	.globl _P3_0
                                     75 	.globl _EA
                                     76 	.globl _ES
                                     77 	.globl _ET1
                                     78 	.globl _EX1
                                     79 	.globl _ET0
                                     80 	.globl _EX0
                                     81 	.globl _P2_7
                                     82 	.globl _P2_6
                                     83 	.globl _P2_5
                                     84 	.globl _P2_4
                                     85 	.globl _P2_3
                                     86 	.globl _P2_2
                                     87 	.globl _P2_1
                                     88 	.globl _P2_0
                                     89 	.globl _SM0
                                     90 	.globl _SM1
                                     91 	.globl _SM2
                                     92 	.globl _REN
                                     93 	.globl _TB8
                                     94 	.globl _RB8
                                     95 	.globl _TI
                                     96 	.globl _RI
                                     97 	.globl _P1_7
                                     98 	.globl _P1_6
                                     99 	.globl _P1_5
                                    100 	.globl _P1_4
                                    101 	.globl _P1_3
                                    102 	.globl _P1_2
                                    103 	.globl _P1_1
                                    104 	.globl _P1_0
                                    105 	.globl _TF1
                                    106 	.globl _TR1
                                    107 	.globl _TF0
                                    108 	.globl _TR0
                                    109 	.globl _IE1
                                    110 	.globl _IT1
                                    111 	.globl _IE0
                                    112 	.globl _IT0
                                    113 	.globl _P0_7
                                    114 	.globl _P0_6
                                    115 	.globl _P0_5
                                    116 	.globl _P0_4
                                    117 	.globl _P0_3
                                    118 	.globl _P0_2
                                    119 	.globl _P0_1
                                    120 	.globl _P0_0
                                    121 	.globl _B
                                    122 	.globl _ACC
                                    123 	.globl _PSW
                                    124 	.globl _IP
                                    125 	.globl _P3
                                    126 	.globl _IE
                                    127 	.globl _P2
                                    128 	.globl _SBUF
                                    129 	.globl _SCON
                                    130 	.globl _P1
                                    131 	.globl _TH1
                                    132 	.globl _TH0
                                    133 	.globl _TL1
                                    134 	.globl _TL0
                                    135 	.globl _TMOD
                                    136 	.globl _TCON
                                    137 	.globl _PCON
                                    138 	.globl _DPH
                                    139 	.globl _DPL
                                    140 	.globl _SP
                                    141 	.globl _P0
                                    142 	.globl _run
                                    143 	.globl _index
                                    144 	.globl _second_PARM_2
                                    145 	.globl _LCD_Pos
                                    146 	.globl _TIMER
                                    147 	.globl _XBYTE
                                    148 	.globl _DBYTE
                                    149 	.globl _CBYTE
                                    150 	.globl _putchar
                                    151 ;--------------------------------------------------------
                                    152 ; special function registers
                                    153 ;--------------------------------------------------------
                                    154 	.area RSEG    (ABS,DATA)
      000000                        155 	.org 0x0000
                           000080   156 G$P0$0_0$0 == 0x0080
                           000080   157 _P0	=	0x0080
                           000081   158 G$SP$0_0$0 == 0x0081
                           000081   159 _SP	=	0x0081
                           000082   160 G$DPL$0_0$0 == 0x0082
                           000082   161 _DPL	=	0x0082
                           000083   162 G$DPH$0_0$0 == 0x0083
                           000083   163 _DPH	=	0x0083
                           000087   164 G$PCON$0_0$0 == 0x0087
                           000087   165 _PCON	=	0x0087
                           000088   166 G$TCON$0_0$0 == 0x0088
                           000088   167 _TCON	=	0x0088
                           000089   168 G$TMOD$0_0$0 == 0x0089
                           000089   169 _TMOD	=	0x0089
                           00008A   170 G$TL0$0_0$0 == 0x008a
                           00008A   171 _TL0	=	0x008a
                           00008B   172 G$TL1$0_0$0 == 0x008b
                           00008B   173 _TL1	=	0x008b
                           00008C   174 G$TH0$0_0$0 == 0x008c
                           00008C   175 _TH0	=	0x008c
                           00008D   176 G$TH1$0_0$0 == 0x008d
                           00008D   177 _TH1	=	0x008d
                           000090   178 G$P1$0_0$0 == 0x0090
                           000090   179 _P1	=	0x0090
                           000098   180 G$SCON$0_0$0 == 0x0098
                           000098   181 _SCON	=	0x0098
                           000099   182 G$SBUF$0_0$0 == 0x0099
                           000099   183 _SBUF	=	0x0099
                           0000A0   184 G$P2$0_0$0 == 0x00a0
                           0000A0   185 _P2	=	0x00a0
                           0000A8   186 G$IE$0_0$0 == 0x00a8
                           0000A8   187 _IE	=	0x00a8
                           0000B0   188 G$P3$0_0$0 == 0x00b0
                           0000B0   189 _P3	=	0x00b0
                           0000B8   190 G$IP$0_0$0 == 0x00b8
                           0000B8   191 _IP	=	0x00b8
                           0000D0   192 G$PSW$0_0$0 == 0x00d0
                           0000D0   193 _PSW	=	0x00d0
                           0000E0   194 G$ACC$0_0$0 == 0x00e0
                           0000E0   195 _ACC	=	0x00e0
                           0000F0   196 G$B$0_0$0 == 0x00f0
                           0000F0   197 _B	=	0x00f0
                                    198 ;--------------------------------------------------------
                                    199 ; special function bits
                                    200 ;--------------------------------------------------------
                                    201 	.area RSEG    (ABS,DATA)
      000000                        202 	.org 0x0000
                           000080   203 G$P0_0$0_0$0 == 0x0080
                           000080   204 _P0_0	=	0x0080
                           000081   205 G$P0_1$0_0$0 == 0x0081
                           000081   206 _P0_1	=	0x0081
                           000082   207 G$P0_2$0_0$0 == 0x0082
                           000082   208 _P0_2	=	0x0082
                           000083   209 G$P0_3$0_0$0 == 0x0083
                           000083   210 _P0_3	=	0x0083
                           000084   211 G$P0_4$0_0$0 == 0x0084
                           000084   212 _P0_4	=	0x0084
                           000085   213 G$P0_5$0_0$0 == 0x0085
                           000085   214 _P0_5	=	0x0085
                           000086   215 G$P0_6$0_0$0 == 0x0086
                           000086   216 _P0_6	=	0x0086
                           000087   217 G$P0_7$0_0$0 == 0x0087
                           000087   218 _P0_7	=	0x0087
                           000088   219 G$IT0$0_0$0 == 0x0088
                           000088   220 _IT0	=	0x0088
                           000089   221 G$IE0$0_0$0 == 0x0089
                           000089   222 _IE0	=	0x0089
                           00008A   223 G$IT1$0_0$0 == 0x008a
                           00008A   224 _IT1	=	0x008a
                           00008B   225 G$IE1$0_0$0 == 0x008b
                           00008B   226 _IE1	=	0x008b
                           00008C   227 G$TR0$0_0$0 == 0x008c
                           00008C   228 _TR0	=	0x008c
                           00008D   229 G$TF0$0_0$0 == 0x008d
                           00008D   230 _TF0	=	0x008d
                           00008E   231 G$TR1$0_0$0 == 0x008e
                           00008E   232 _TR1	=	0x008e
                           00008F   233 G$TF1$0_0$0 == 0x008f
                           00008F   234 _TF1	=	0x008f
                           000090   235 G$P1_0$0_0$0 == 0x0090
                           000090   236 _P1_0	=	0x0090
                           000091   237 G$P1_1$0_0$0 == 0x0091
                           000091   238 _P1_1	=	0x0091
                           000092   239 G$P1_2$0_0$0 == 0x0092
                           000092   240 _P1_2	=	0x0092
                           000093   241 G$P1_3$0_0$0 == 0x0093
                           000093   242 _P1_3	=	0x0093
                           000094   243 G$P1_4$0_0$0 == 0x0094
                           000094   244 _P1_4	=	0x0094
                           000095   245 G$P1_5$0_0$0 == 0x0095
                           000095   246 _P1_5	=	0x0095
                           000096   247 G$P1_6$0_0$0 == 0x0096
                           000096   248 _P1_6	=	0x0096
                           000097   249 G$P1_7$0_0$0 == 0x0097
                           000097   250 _P1_7	=	0x0097
                           000098   251 G$RI$0_0$0 == 0x0098
                           000098   252 _RI	=	0x0098
                           000099   253 G$TI$0_0$0 == 0x0099
                           000099   254 _TI	=	0x0099
                           00009A   255 G$RB8$0_0$0 == 0x009a
                           00009A   256 _RB8	=	0x009a
                           00009B   257 G$TB8$0_0$0 == 0x009b
                           00009B   258 _TB8	=	0x009b
                           00009C   259 G$REN$0_0$0 == 0x009c
                           00009C   260 _REN	=	0x009c
                           00009D   261 G$SM2$0_0$0 == 0x009d
                           00009D   262 _SM2	=	0x009d
                           00009E   263 G$SM1$0_0$0 == 0x009e
                           00009E   264 _SM1	=	0x009e
                           00009F   265 G$SM0$0_0$0 == 0x009f
                           00009F   266 _SM0	=	0x009f
                           0000A0   267 G$P2_0$0_0$0 == 0x00a0
                           0000A0   268 _P2_0	=	0x00a0
                           0000A1   269 G$P2_1$0_0$0 == 0x00a1
                           0000A1   270 _P2_1	=	0x00a1
                           0000A2   271 G$P2_2$0_0$0 == 0x00a2
                           0000A2   272 _P2_2	=	0x00a2
                           0000A3   273 G$P2_3$0_0$0 == 0x00a3
                           0000A3   274 _P2_3	=	0x00a3
                           0000A4   275 G$P2_4$0_0$0 == 0x00a4
                           0000A4   276 _P2_4	=	0x00a4
                           0000A5   277 G$P2_5$0_0$0 == 0x00a5
                           0000A5   278 _P2_5	=	0x00a5
                           0000A6   279 G$P2_6$0_0$0 == 0x00a6
                           0000A6   280 _P2_6	=	0x00a6
                           0000A7   281 G$P2_7$0_0$0 == 0x00a7
                           0000A7   282 _P2_7	=	0x00a7
                           0000A8   283 G$EX0$0_0$0 == 0x00a8
                           0000A8   284 _EX0	=	0x00a8
                           0000A9   285 G$ET0$0_0$0 == 0x00a9
                           0000A9   286 _ET0	=	0x00a9
                           0000AA   287 G$EX1$0_0$0 == 0x00aa
                           0000AA   288 _EX1	=	0x00aa
                           0000AB   289 G$ET1$0_0$0 == 0x00ab
                           0000AB   290 _ET1	=	0x00ab
                           0000AC   291 G$ES$0_0$0 == 0x00ac
                           0000AC   292 _ES	=	0x00ac
                           0000AF   293 G$EA$0_0$0 == 0x00af
                           0000AF   294 _EA	=	0x00af
                           0000B0   295 G$P3_0$0_0$0 == 0x00b0
                           0000B0   296 _P3_0	=	0x00b0
                           0000B1   297 G$P3_1$0_0$0 == 0x00b1
                           0000B1   298 _P3_1	=	0x00b1
                           0000B2   299 G$P3_2$0_0$0 == 0x00b2
                           0000B2   300 _P3_2	=	0x00b2
                           0000B3   301 G$P3_3$0_0$0 == 0x00b3
                           0000B3   302 _P3_3	=	0x00b3
                           0000B4   303 G$P3_4$0_0$0 == 0x00b4
                           0000B4   304 _P3_4	=	0x00b4
                           0000B5   305 G$P3_5$0_0$0 == 0x00b5
                           0000B5   306 _P3_5	=	0x00b5
                           0000B6   307 G$P3_6$0_0$0 == 0x00b6
                           0000B6   308 _P3_6	=	0x00b6
                           0000B7   309 G$P3_7$0_0$0 == 0x00b7
                           0000B7   310 _P3_7	=	0x00b7
                           0000B0   311 G$RXD$0_0$0 == 0x00b0
                           0000B0   312 _RXD	=	0x00b0
                           0000B1   313 G$TXD$0_0$0 == 0x00b1
                           0000B1   314 _TXD	=	0x00b1
                           0000B2   315 G$INT0$0_0$0 == 0x00b2
                           0000B2   316 _INT0	=	0x00b2
                           0000B3   317 G$INT1$0_0$0 == 0x00b3
                           0000B3   318 _INT1	=	0x00b3
                           0000B4   319 G$T0$0_0$0 == 0x00b4
                           0000B4   320 _T0	=	0x00b4
                           0000B5   321 G$T1$0_0$0 == 0x00b5
                           0000B5   322 _T1	=	0x00b5
                           0000B6   323 G$WR$0_0$0 == 0x00b6
                           0000B6   324 _WR	=	0x00b6
                           0000B7   325 G$RD$0_0$0 == 0x00b7
                           0000B7   326 _RD	=	0x00b7
                           0000B8   327 G$PX0$0_0$0 == 0x00b8
                           0000B8   328 _PX0	=	0x00b8
                           0000B9   329 G$PT0$0_0$0 == 0x00b9
                           0000B9   330 _PT0	=	0x00b9
                           0000BA   331 G$PX1$0_0$0 == 0x00ba
                           0000BA   332 _PX1	=	0x00ba
                           0000BB   333 G$PT1$0_0$0 == 0x00bb
                           0000BB   334 _PT1	=	0x00bb
                           0000BC   335 G$PS$0_0$0 == 0x00bc
                           0000BC   336 _PS	=	0x00bc
                           0000D0   337 G$P$0_0$0 == 0x00d0
                           0000D0   338 _P	=	0x00d0
                           0000D1   339 G$F1$0_0$0 == 0x00d1
                           0000D1   340 _F1	=	0x00d1
                           0000D2   341 G$OV$0_0$0 == 0x00d2
                           0000D2   342 _OV	=	0x00d2
                           0000D3   343 G$RS0$0_0$0 == 0x00d3
                           0000D3   344 _RS0	=	0x00d3
                           0000D4   345 G$RS1$0_0$0 == 0x00d4
                           0000D4   346 _RS1	=	0x00d4
                           0000D5   347 G$F0$0_0$0 == 0x00d5
                           0000D5   348 _F0	=	0x00d5
                           0000D6   349 G$AC$0_0$0 == 0x00d6
                           0000D6   350 _AC	=	0x00d6
                           0000D7   351 G$CY$0_0$0 == 0x00d7
                           0000D7   352 _CY	=	0x00d7
                           0000B2   353 G$Tlac1$0_0$0 == 0x00b2
                           0000B2   354 _Tlac1	=	0x00b2
                           0000B3   355 G$Tlac2$0_0$0 == 0x00b3
                           0000B3   356 _Tlac2	=	0x00b3
                           0000B6   357 G$Buzzer$0_0$0 == 0x00b6
                           0000B6   358 _Buzzer	=	0x00b6
                           0000C2   359 G$LED1$0_0$0 == 0x00c2
                           0000C2   360 _LED1	=	0x00c2
                           0000C3   361 G$LED2$0_0$0 == 0x00c3
                           0000C3   362 _LED2	=	0x00c3
                           0000C4   363 G$LED3$0_0$0 == 0x00c4
                           0000C4   364 _LED3	=	0x00c4
                           000090   365 G$POT$0_0$0 == 0x0090
                           000090   366 _POT	=	0x0090
                           000091   367 G$SMT$0_0$0 == 0x0091
                           000091   368 _SMT	=	0x0091
                           000092   369 G$ZAR$0_0$0 == 0x0092
                           000092   370 _ZAR	=	0x0092
                           000093   371 G$LB_Data$0_0$0 == 0x0093
                           000093   372 _LB_Data	=	0x0093
                           000094   373 G$LB_SCK$0_0$0 == 0x0094
                           000094   374 _LB_SCK	=	0x0094
                           000095   375 G$LB_SCL$0_0$0 == 0x0095
                           000095   376 _LB_SCL	=	0x0095
                           000096   377 G$LB_RCK$0_0$0 == 0x0096
                           000096   378 _LB_RCK	=	0x0096
                           000097   379 G$LB_OE$0_0$0 == 0x0097
                           000097   380 _LB_OE	=	0x0097
                           000080   381 G$KEY_C_1$0_0$0 == 0x0080
                           000080   382 _KEY_C_1	=	0x0080
                           000081   383 G$KEY_C_2$0_0$0 == 0x0081
                           000081   384 _KEY_C_2	=	0x0081
                           000082   385 G$KEY_C_3$0_0$0 == 0x0082
                           000082   386 _KEY_C_3	=	0x0082
                           000083   387 G$KEY_C_4$0_0$0 == 0x0083
                           000083   388 _KEY_C_4	=	0x0083
                           000084   389 G$KEY_R_1$0_0$0 == 0x0084
                           000084   390 _KEY_R_1	=	0x0084
                           000085   391 G$KEY_R_2$0_0$0 == 0x0085
                           000085   392 _KEY_R_2	=	0x0085
                           000086   393 G$KEY_R_3$0_0$0 == 0x0086
                           000086   394 _KEY_R_3	=	0x0086
                           000087   395 G$KEY_R_4$0_0$0 == 0x0087
                           000087   396 _KEY_R_4	=	0x0087
                                    397 ;--------------------------------------------------------
                                    398 ; overlayable register banks
                                    399 ;--------------------------------------------------------
                                    400 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        401 	.ds 8
                                    402 ;--------------------------------------------------------
                                    403 ; overlayable bit register bank
                                    404 ;--------------------------------------------------------
                                    405 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        406 bits:
      000000                        407 	.ds 1
                           008000   408 	b0 = bits[0]
                           008100   409 	b1 = bits[1]
                           008200   410 	b2 = bits[2]
                           008300   411 	b3 = bits[3]
                           008400   412 	b4 = bits[4]
                           008500   413 	b5 = bits[5]
                           008600   414 	b6 = bits[6]
                           008700   415 	b7 = bits[7]
                                    416 ;--------------------------------------------------------
                                    417 ; internal ram data
                                    418 ;--------------------------------------------------------
                                    419 	.area DSEG    (DATA)
                           000000   420 G$CBYTE$0_0$0==.
      000000                        421 _CBYTE::
      000000                        422 	.ds 2
                           000002   423 G$DBYTE$0_0$0==.
      000002                        424 _DBYTE::
      000002                        425 	.ds 1
                           000003   426 G$XBYTE$0_0$0==.
      000003                        427 _XBYTE::
      000003                        428 	.ds 2
                           000005   429 G$TIMER$0_0$0==.
      000005                        430 _TIMER::
      000005                        431 	.ds 2
                           000007   432 G$LCD_Pos$0_0$0==.
      000007                        433 _LCD_Pos::
      000007                        434 	.ds 1
                           000008   435 Lmain.second$power$1_0$38==.
      000008                        436 _second_PARM_2:
      000008                        437 	.ds 2
                           00000A   438 G$index$0_0$0==.
      00000A                        439 _index::
      00000A                        440 	.ds 2
                           00000C   441 G$run$0_0$0==.
      00000C                        442 _run::
      00000C                        443 	.ds 1
                                    444 ;--------------------------------------------------------
                                    445 ; overlayable items in internal ram 
                                    446 ;--------------------------------------------------------
                                    447 ;--------------------------------------------------------
                                    448 ; Stack segment in internal ram 
                                    449 ;--------------------------------------------------------
                                    450 	.area	SSEG
      000000                        451 __start__stack:
      000000                        452 	.ds	1
                                    453 
                                    454 ;--------------------------------------------------------
                                    455 ; indirectly addressable internal ram data
                                    456 ;--------------------------------------------------------
                                    457 	.area ISEG    (DATA)
                                    458 ;--------------------------------------------------------
                                    459 ; absolute internal ram data
                                    460 ;--------------------------------------------------------
                                    461 	.area IABS    (ABS,DATA)
                                    462 	.area IABS    (ABS,DATA)
                                    463 ;--------------------------------------------------------
                                    464 ; bit data
                                    465 ;--------------------------------------------------------
                                    466 	.area BSEG    (BIT)
                           000000   467 Lmain.SetLedBar$sloc0$0_1$0==.
      000000                        468 _SetLedBar_sloc0_1_0:
      000000                        469 	.ds 1
                                    470 ;--------------------------------------------------------
                                    471 ; paged external ram data
                                    472 ;--------------------------------------------------------
                                    473 	.area PSEG    (PAG,XDATA)
                                    474 ;--------------------------------------------------------
                                    475 ; external ram data
                                    476 ;--------------------------------------------------------
                                    477 	.area XSEG    (XDATA)
                                    478 ;--------------------------------------------------------
                                    479 ; absolute external ram data
                                    480 ;--------------------------------------------------------
                                    481 	.area XABS    (ABS,XDATA)
                                    482 ;--------------------------------------------------------
                                    483 ; external initialized ram data
                                    484 ;--------------------------------------------------------
                                    485 	.area XISEG   (XDATA)
                                    486 	.area HOME    (CODE)
                                    487 	.area GSINIT0 (CODE)
                                    488 	.area GSINIT1 (CODE)
                                    489 	.area GSINIT2 (CODE)
                                    490 	.area GSINIT3 (CODE)
                                    491 	.area GSINIT4 (CODE)
                                    492 	.area GSINIT5 (CODE)
                                    493 	.area GSINIT  (CODE)
                                    494 	.area GSFINAL (CODE)
                                    495 	.area CSEG    (CODE)
                                    496 ;--------------------------------------------------------
                                    497 ; interrupt vector 
                                    498 ;--------------------------------------------------------
                                    499 	.area HOME    (CODE)
      000000                        500 __interrupt_vect:
      000000 02r00r00         [24]  501 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  502 	reti
      000004                        503 	.ds	7
      00000B 02r04rB1         [24]  504 	ljmp	_timer0
                                    505 ;--------------------------------------------------------
                                    506 ; global & static initialisations
                                    507 ;--------------------------------------------------------
                                    508 	.area HOME    (CODE)
                                    509 	.area GSINIT  (CODE)
                                    510 	.area GSFINAL (CODE)
                                    511 	.area GSINIT  (CODE)
                                    512 	.globl __sdcc_gsinit_startup
                                    513 	.globl __sdcc_program_startup
                                    514 	.globl __start__stack
                                    515 	.globl __mcs51_genXINIT
                                    516 	.globl __mcs51_genXRAMCLEAR
                                    517 	.globl __mcs51_genRAMCLEAR
                           000000   518 	C$main.c$28$1_0$49 ==.
                                    519 ;	main.c:28: __code   byte *CBYTE=0;
      000000 E4               [12]  520 	clr	a
      000001 F5*00            [12]  521 	mov	_CBYTE,a
      000003 F5*01            [12]  522 	mov	(_CBYTE + 1),a
                           000005   523 	C$main.c$29$1_0$49 ==.
                                    524 ;	main.c:29: __idata  byte *DBYTE=0;
                                    525 ;	1-genFromRTrack replaced	mov	_DBYTE,#0x00
      000005 F5*02            [12]  526 	mov	_DBYTE,a
                           000007   527 	C$main.c$30$1_0$49 ==.
                                    528 ;	main.c:30: __xdata  byte *XBYTE=0;
      000007 F5*03            [12]  529 	mov	_XBYTE,a
      000009 F5*04            [12]  530 	mov	(_XBYTE + 1),a
                                    531 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  532 	ljmp	__sdcc_program_startup
                                    533 ;--------------------------------------------------------
                                    534 ; Home
                                    535 ;--------------------------------------------------------
                                    536 	.area HOME    (CODE)
                                    537 	.area HOME    (CODE)
      00000E                        538 __sdcc_program_startup:
      00000E 02r03r18         [24]  539 	ljmp	_main
                                    540 ;	return from main will return to caller
                                    541 ;--------------------------------------------------------
                                    542 ; code
                                    543 ;--------------------------------------------------------
                                    544 	.area CSEG    (CODE)
                                    545 ;------------------------------------------------------------
                                    546 ;Allocation info for local variables in function 'Delay'
                                    547 ;------------------------------------------------------------
                                    548 ;pause                     Allocated to registers r6 r7 
                                    549 ;------------------------------------------------------------
                           000000   550 	G$Delay$0$0 ==.
                           000000   551 	C$main.c$142$0_0$16 ==.
                                    552 ;	main.c:142: void Delay(int pause)
                                    553 ;	-----------------------------------------
                                    554 ;	 function Delay
                                    555 ;	-----------------------------------------
      000000                        556 _Delay:
                           000007   557 	ar7 = 0x07
                           000006   558 	ar6 = 0x06
                           000005   559 	ar5 = 0x05
                           000004   560 	ar4 = 0x04
                           000003   561 	ar3 = 0x03
                           000002   562 	ar2 = 0x02
                           000001   563 	ar1 = 0x01
                           000000   564 	ar0 = 0x00
      000000 AE 82            [24]  565 	mov	r6,dpl
      000002 AF 83            [24]  566 	mov	r7,dph
                           000004   567 	C$main.c$144$1_0$16 ==.
                                    568 ;	main.c:144: TIMER=1+pause;
      000004 74 01            [12]  569 	mov	a,#0x01
      000006 2E               [12]  570 	add	a,r6
      000007 F5*05            [12]  571 	mov	_TIMER,a
      000009 E4               [12]  572 	clr	a
      00000A 3F               [12]  573 	addc	a,r7
      00000B F5*06            [12]  574 	mov	(_TIMER + 1),a
                           00000D   575 	C$main.c$145$1_0$16 ==.
                                    576 ;	main.c:145: while(TIMER);
      00000D                        577 00101$:
      00000D E5*05            [12]  578 	mov	a,_TIMER
      00000F 45*06            [12]  579 	orl	a,(_TIMER + 1)
      000011 70 FA            [24]  580 	jnz	00101$
                           000013   581 	C$main.c$146$1_0$16 ==.
                                    582 ;	main.c:146: }
                           000013   583 	C$main.c$146$1_0$16 ==.
                           000013   584 	XG$Delay$0$0 ==.
      000013 22               [24]  585 	ret
                                    586 ;------------------------------------------------------------
                                    587 ;Allocation info for local variables in function 'Pause'
                                    588 ;------------------------------------------------------------
                                    589 ;i                         Allocated to registers r6 r7 
                                    590 ;------------------------------------------------------------
                           000014   591 	G$Pause$0$0 ==.
                           000014   592 	C$main.c$148$1_0$17 ==.
                                    593 ;	main.c:148: void Pause()
                                    594 ;	-----------------------------------------
                                    595 ;	 function Pause
                                    596 ;	-----------------------------------------
      000014                        597 _Pause:
                           000014   598 	C$main.c$150$2_0$17 ==.
                                    599 ;	main.c:150: int i=30;
      000014 7E 1E            [12]  600 	mov	r6,#0x1e
      000016 7F 00            [12]  601 	mov	r7,#0x00
                           000018   602 	C$main.c$151$1_0$17 ==.
                                    603 ;	main.c:151: while(i--);
      000018                        604 00101$:
      000018 8E 04            [24]  605 	mov	ar4,r6
      00001A 8F 05            [24]  606 	mov	ar5,r7
      00001C 1E               [12]  607 	dec	r6
      00001D BE FF 01         [24]  608 	cjne	r6,#0xff,00110$
      000020 1F               [12]  609 	dec	r7
      000021                        610 00110$:
      000021 EC               [12]  611 	mov	a,r4
      000022 4D               [12]  612 	orl	a,r5
      000023 70 F3            [24]  613 	jnz	00101$
                           000025   614 	C$main.c$152$1_0$17 ==.
                                    615 ;	main.c:152: }
                           000025   616 	C$main.c$152$1_0$17 ==.
                           000025   617 	XG$Pause$0$0 ==.
      000025 22               [24]  618 	ret
                                    619 ;------------------------------------------------------------
                                    620 ;Allocation info for local variables in function 'LCD_State'
                                    621 ;------------------------------------------------------------
                                    622 ;temp                      Allocated to registers 
                                    623 ;------------------------------------------------------------
                           000026   624 	G$LCD_State$0$0 ==.
                           000026   625 	C$main.c$154$1_0$18 ==.
                                    626 ;	main.c:154: byte LCD_State()
                                    627 ;	-----------------------------------------
                                    628 ;	 function LCD_State
                                    629 ;	-----------------------------------------
      000026                        630 _LCD_State:
                           000026   631 	C$main.c$158$1_0$18 ==.
                                    632 ;	main.c:158: Pause();
      000026 12r00r14         [24]  633 	lcall	_Pause
                           000029   634 	C$main.c$159$1_0$18 ==.
                                    635 ;	main.c:159: P2=(LCD_RW | 0x0F);
      000029 75 A0 2F         [24]  636 	mov	_P2,#0x2f
                           00002C   637 	C$main.c$160$1_0$18 ==.
                                    638 ;	main.c:160: Pause();
      00002C 12r00r14         [24]  639 	lcall	_Pause
                           00002F   640 	C$main.c$161$1_0$18 ==.
                                    641 ;	main.c:161: P2=(LCD_RW |LCD_EN | 0x0F);
      00002F 75 A0 6F         [24]  642 	mov	_P2,#0x6f
                           000032   643 	C$main.c$162$1_0$18 ==.
                                    644 ;	main.c:162: Pause();
      000032 12r00r14         [24]  645 	lcall	_Pause
                           000035   646 	C$main.c$163$1_0$18 ==.
                                    647 ;	main.c:163: temp=16*(P2&0x0F);
      000035 E5 A0            [12]  648 	mov	a,_P2
      000037 54 0F            [12]  649 	anl	a,#0x0f
      000039 C4               [12]  650 	swap	a
      00003A 54 F0            [12]  651 	anl	a,#0xf0
      00003C FF               [12]  652 	mov	r7,a
                           00003D   653 	C$main.c$164$1_0$18 ==.
                                    654 ;	main.c:164: P2=(LCD_RW | 0x0F);
      00003D 75 A0 2F         [24]  655 	mov	_P2,#0x2f
                           000040   656 	C$main.c$166$1_0$18 ==.
                                    657 ;	main.c:166: Pause();
      000040 C0 07            [24]  658 	push	ar7
      000042 12r00r14         [24]  659 	lcall	_Pause
                           000045   660 	C$main.c$167$1_0$18 ==.
                                    661 ;	main.c:167: P2=(LCD_RW | 0x0F);
      000045 75 A0 2F         [24]  662 	mov	_P2,#0x2f
                           000048   663 	C$main.c$168$1_0$18 ==.
                                    664 ;	main.c:168: Pause();
      000048 12r00r14         [24]  665 	lcall	_Pause
                           00004B   666 	C$main.c$169$1_0$18 ==.
                                    667 ;	main.c:169: P2=(LCD_RW |LCD_EN | 0x0F);
      00004B 75 A0 6F         [24]  668 	mov	_P2,#0x6f
                           00004E   669 	C$main.c$170$1_0$18 ==.
                                    670 ;	main.c:170: Pause();
      00004E 12r00r14         [24]  671 	lcall	_Pause
      000051 D0 07            [24]  672 	pop	ar7
                           000053   673 	C$main.c$171$1_0$18 ==.
                                    674 ;	main.c:171: temp=temp+P2&0x0F;
      000053 E5 A0            [12]  675 	mov	a,_P2
      000055 2F               [12]  676 	add	a,r7
      000056 54 0F            [12]  677 	anl	a,#0x0f
      000058 F5 82            [12]  678 	mov	dpl,a
                           00005A   679 	C$main.c$172$1_0$18 ==.
                                    680 ;	main.c:172: P2=(LCD_RW | 0x0F);
      00005A 75 A0 2F         [24]  681 	mov	_P2,#0x2f
                           00005D   682 	C$main.c$174$1_0$18 ==.
                                    683 ;	main.c:174: return (temp);
                           00005D   684 	C$main.c$175$1_0$18 ==.
                                    685 ;	main.c:175: }
                           00005D   686 	C$main.c$175$1_0$18 ==.
                           00005D   687 	XG$LCD_State$0$0 ==.
      00005D 22               [24]  688 	ret
                                    689 ;------------------------------------------------------------
                                    690 ;Allocation info for local variables in function 'LCD_SendCmd'
                                    691 ;------------------------------------------------------------
                                    692 ;val                       Allocated to registers r7 
                                    693 ;------------------------------------------------------------
                           00005E   694 	G$LCD_SendCmd$0$0 ==.
                           00005E   695 	C$main.c$177$1_0$20 ==.
                                    696 ;	main.c:177: void LCD_SendCmd( byte val )
                                    697 ;	-----------------------------------------
                                    698 ;	 function LCD_SendCmd
                                    699 ;	-----------------------------------------
      00005E                        700 _LCD_SendCmd:
      00005E AF 82            [24]  701 	mov	r7,dpl
                           000060   702 	C$main.c$179$1_0$20 ==.
                                    703 ;	main.c:179: Pause();
      000060 C0 07            [24]  704 	push	ar7
      000062 12r00r14         [24]  705 	lcall	_Pause
      000065 D0 07            [24]  706 	pop	ar7
                           000067   707 	C$main.c$180$1_0$20 ==.
                                    708 ;	main.c:180: P2=((val>>4)&0x0F);
      000067 EF               [12]  709 	mov	a,r7
      000068 C4               [12]  710 	swap	a
      000069 54 0F            [12]  711 	anl	a,#0x0f
      00006B FE               [12]  712 	mov	r6,a
      00006C 53 06 0F         [24]  713 	anl	ar6,#0x0f
      00006F 8E A0            [24]  714 	mov	_P2,r6
                           000071   715 	C$main.c$181$1_0$20 ==.
                                    716 ;	main.c:181: Pause();
      000071 C0 07            [24]  717 	push	ar7
      000073 C0 06            [24]  718 	push	ar6
      000075 12r00r14         [24]  719 	lcall	_Pause
      000078 D0 06            [24]  720 	pop	ar6
                           00007A   721 	C$main.c$182$1_0$20 ==.
                                    722 ;	main.c:182: P2= LCD_EN | ((val>>4)&0x0F);
      00007A 74 40            [12]  723 	mov	a,#0x40
      00007C 4E               [12]  724 	orl	a,r6
      00007D F5 A0            [12]  725 	mov	_P2,a
                           00007F   726 	C$main.c$183$1_0$20 ==.
                                    727 ;	main.c:183: Pause();
      00007F C0 06            [24]  728 	push	ar6
      000081 12r00r14         [24]  729 	lcall	_Pause
      000084 D0 06            [24]  730 	pop	ar6
                           000086   731 	C$main.c$184$1_0$20 ==.
                                    732 ;	main.c:184: P2=((val>>4)&0x0F);
      000086 8E A0            [24]  733 	mov	_P2,r6
                           000088   734 	C$main.c$185$1_0$20 ==.
                                    735 ;	main.c:185: Pause();
      000088 12r00r14         [24]  736 	lcall	_Pause
      00008B D0 07            [24]  737 	pop	ar7
                           00008D   738 	C$main.c$186$1_0$20 ==.
                                    739 ;	main.c:186: P2=( (val & 0x0F) );
      00008D 53 07 0F         [24]  740 	anl	ar7,#0x0f
      000090 8F A0            [24]  741 	mov	_P2,r7
                           000092   742 	C$main.c$187$1_0$20 ==.
                                    743 ;	main.c:187: Pause();
      000092 C0 07            [24]  744 	push	ar7
      000094 12r00r14         [24]  745 	lcall	_Pause
      000097 D0 07            [24]  746 	pop	ar7
                           000099   747 	C$main.c$188$1_0$20 ==.
                                    748 ;	main.c:188: P2=( LCD_EN | (val & 0x0F ));
      000099 74 40            [12]  749 	mov	a,#0x40
      00009B 4F               [12]  750 	orl	a,r7
      00009C F5 A0            [12]  751 	mov	_P2,a
                           00009E   752 	C$main.c$189$1_0$20 ==.
                                    753 ;	main.c:189: Pause();
      00009E C0 07            [24]  754 	push	ar7
      0000A0 12r00r14         [24]  755 	lcall	_Pause
      0000A3 D0 07            [24]  756 	pop	ar7
                           0000A5   757 	C$main.c$190$1_0$20 ==.
                                    758 ;	main.c:190: P2=( (val & 0x0F) );
      0000A5 8F A0            [24]  759 	mov	_P2,r7
                           0000A7   760 	C$main.c$192$1_0$20 ==.
                                    761 ;	main.c:192: while(LCD_State()&0x80);
      0000A7                        762 00101$:
      0000A7 12r00r26         [24]  763 	lcall	_LCD_State
      0000AA E5 82            [12]  764 	mov	a,dpl
      0000AC 20 E7 F8         [24]  765 	jb	acc.7,00101$
                           0000AF   766 	C$main.c$193$1_0$20 ==.
                                    767 ;	main.c:193: }
                           0000AF   768 	C$main.c$193$1_0$20 ==.
                           0000AF   769 	XG$LCD_SendCmd$0$0 ==.
      0000AF 22               [24]  770 	ret
                                    771 ;------------------------------------------------------------
                                    772 ;Allocation info for local variables in function 'LCD_SendData'
                                    773 ;------------------------------------------------------------
                                    774 ;val                       Allocated to registers r7 
                                    775 ;------------------------------------------------------------
                           0000B0   776 	G$LCD_SendData$0$0 ==.
                           0000B0   777 	C$main.c$195$1_0$22 ==.
                                    778 ;	main.c:195: void LCD_SendData( byte val )
                                    779 ;	-----------------------------------------
                                    780 ;	 function LCD_SendData
                                    781 ;	-----------------------------------------
      0000B0                        782 _LCD_SendData:
      0000B0 AF 82            [24]  783 	mov	r7,dpl
                           0000B2   784 	C$main.c$197$1_0$22 ==.
                                    785 ;	main.c:197: Pause();
      0000B2 C0 07            [24]  786 	push	ar7
      0000B4 12r00r14         [24]  787 	lcall	_Pause
      0000B7 D0 07            [24]  788 	pop	ar7
                           0000B9   789 	C$main.c$198$1_0$22 ==.
                                    790 ;	main.c:198: P2=( LCD_RS | ((val>>4)&0x0F) );
      0000B9 EF               [12]  791 	mov	a,r7
      0000BA C4               [12]  792 	swap	a
      0000BB 54 0F            [12]  793 	anl	a,#0x0f
      0000BD FE               [12]  794 	mov	r6,a
      0000BE 53 06 0F         [24]  795 	anl	ar6,#0x0f
      0000C1 74 10            [12]  796 	mov	a,#0x10
      0000C3 4E               [12]  797 	orl	a,r6
      0000C4 FD               [12]  798 	mov	r5,a
      0000C5 8D A0            [24]  799 	mov	_P2,r5
                           0000C7   800 	C$main.c$199$1_0$22 ==.
                                    801 ;	main.c:199: Pause();
      0000C7 C0 07            [24]  802 	push	ar7
      0000C9 C0 06            [24]  803 	push	ar6
      0000CB C0 05            [24]  804 	push	ar5
      0000CD 12r00r14         [24]  805 	lcall	_Pause
      0000D0 D0 05            [24]  806 	pop	ar5
      0000D2 D0 06            [24]  807 	pop	ar6
                           0000D4   808 	C$main.c$200$1_0$22 ==.
                                    809 ;	main.c:200: P2= LCD_RS | LCD_EN | ((val>>4)&0x0F);
      0000D4 74 50            [12]  810 	mov	a,#0x50
      0000D6 4E               [12]  811 	orl	a,r6
      0000D7 F5 A0            [12]  812 	mov	_P2,a
                           0000D9   813 	C$main.c$201$1_0$22 ==.
                                    814 ;	main.c:201: Pause();
      0000D9 C0 05            [24]  815 	push	ar5
      0000DB 12r00r14         [24]  816 	lcall	_Pause
      0000DE D0 05            [24]  817 	pop	ar5
                           0000E0   818 	C$main.c$202$1_0$22 ==.
                                    819 ;	main.c:202: P2=( LCD_RS | ((val>>4)&0x0F) );
      0000E0 8D A0            [24]  820 	mov	_P2,r5
                           0000E2   821 	C$main.c$203$1_0$22 ==.
                                    822 ;	main.c:203: Pause();
      0000E2 12r00r14         [24]  823 	lcall	_Pause
      0000E5 D0 07            [24]  824 	pop	ar7
                           0000E7   825 	C$main.c$204$1_0$22 ==.
                                    826 ;	main.c:204: P2=( LCD_RS | (val & 0x0F) );
      0000E7 53 07 0F         [24]  827 	anl	ar7,#0x0f
      0000EA 74 10            [12]  828 	mov	a,#0x10
      0000EC 4F               [12]  829 	orl	a,r7
      0000ED FE               [12]  830 	mov	r6,a
      0000EE 8E A0            [24]  831 	mov	_P2,r6
                           0000F0   832 	C$main.c$205$1_0$22 ==.
                                    833 ;	main.c:205: Pause();
      0000F0 C0 07            [24]  834 	push	ar7
      0000F2 C0 06            [24]  835 	push	ar6
      0000F4 12r00r14         [24]  836 	lcall	_Pause
      0000F7 D0 06            [24]  837 	pop	ar6
      0000F9 D0 07            [24]  838 	pop	ar7
                           0000FB   839 	C$main.c$206$1_0$22 ==.
                                    840 ;	main.c:206: P2=( LCD_RS | LCD_EN | (val & 0x0F) );
      0000FB 74 50            [12]  841 	mov	a,#0x50
      0000FD 4F               [12]  842 	orl	a,r7
      0000FE F5 A0            [12]  843 	mov	_P2,a
                           000100   844 	C$main.c$207$1_0$22 ==.
                                    845 ;	main.c:207: Pause();
      000100 C0 06            [24]  846 	push	ar6
      000102 12r00r14         [24]  847 	lcall	_Pause
      000105 D0 06            [24]  848 	pop	ar6
                           000107   849 	C$main.c$208$1_0$22 ==.
                                    850 ;	main.c:208: P2=( LCD_RS | (val & 0x0F) );
      000107 8E A0            [24]  851 	mov	_P2,r6
                           000109   852 	C$main.c$210$1_0$22 ==.
                                    853 ;	main.c:210: while(LCD_State()&0x80);
      000109                        854 00101$:
      000109 12r00r26         [24]  855 	lcall	_LCD_State
      00010C E5 82            [12]  856 	mov	a,dpl
      00010E 20 E7 F8         [24]  857 	jb	acc.7,00101$
                           000111   858 	C$main.c$211$1_0$22 ==.
                                    859 ;	main.c:211: }
                           000111   860 	C$main.c$211$1_0$22 ==.
                           000111   861 	XG$LCD_SendData$0$0 ==.
      000111 22               [24]  862 	ret
                                    863 ;------------------------------------------------------------
                                    864 ;Allocation info for local variables in function 'LCD_Init'
                                    865 ;------------------------------------------------------------
                           000112   866 	G$LCD_Init$0$0 ==.
                           000112   867 	C$main.c$214$1_0$24 ==.
                                    868 ;	main.c:214: void LCD_Init(void)
                                    869 ;	-----------------------------------------
                                    870 ;	 function LCD_Init
                                    871 ;	-----------------------------------------
      000112                        872 _LCD_Init:
                           000112   873 	C$main.c$216$1_0$24 ==.
                                    874 ;	main.c:216: P2=( 0 );      /* set RS, RW and EN low */
      000112 75 A0 00         [24]  875 	mov	_P2,#0x00
                           000115   876 	C$main.c$218$1_0$24 ==.
                                    877 ;	main.c:218: Delay(50);        /* power on delay - wait more than 15 ms */
      000115 90 00 32         [24]  878 	mov	dptr,#0x0032
      000118 12r00r00         [24]  879 	lcall	_Delay
                           00011B   880 	C$main.c$220$1_0$24 ==.
                                    881 ;	main.c:220: P2=( 0x03 );           /* lce enable low */
      00011B 75 A0 03         [24]  882 	mov	_P2,#0x03
                           00011E   883 	C$main.c$221$1_0$24 ==.
                                    884 ;	main.c:221: Delay(1);                /* wait more than 100us */
      00011E 90 00 01         [24]  885 	mov	dptr,#0x0001
      000121 12r00r00         [24]  886 	lcall	_Delay
                           000124   887 	C$main.c$222$1_0$24 ==.
                                    888 ;	main.c:222: P2=( LCD_EN | 0x03 );  /* lcd enable high */
      000124 75 A0 43         [24]  889 	mov	_P2,#0x43
                           000127   890 	C$main.c$223$1_0$24 ==.
                                    891 ;	main.c:223: Delay(1);                /* wait more than 100us */
      000127 90 00 01         [24]  892 	mov	dptr,#0x0001
      00012A 12r00r00         [24]  893 	lcall	_Delay
                           00012D   894 	C$main.c$224$1_0$24 ==.
                                    895 ;	main.c:224: P2=( 0x03 );           /* lce enable low */
      00012D 75 A0 03         [24]  896 	mov	_P2,#0x03
                           000130   897 	C$main.c$225$1_0$24 ==.
                                    898 ;	main.c:225: Delay(5);                  /* wait more than 4.1 ms */
      000130 90 00 05         [24]  899 	mov	dptr,#0x0005
      000133 12r00r00         [24]  900 	lcall	_Delay
                           000136   901 	C$main.c$227$1_0$24 ==.
                                    902 ;	main.c:227: P2=( 0x03 );           /* lcd enable low */
      000136 75 A0 03         [24]  903 	mov	_P2,#0x03
                           000139   904 	C$main.c$228$1_0$24 ==.
                                    905 ;	main.c:228: Delay(1);                /* wait more than 100us */
      000139 90 00 01         [24]  906 	mov	dptr,#0x0001
      00013C 12r00r00         [24]  907 	lcall	_Delay
                           00013F   908 	C$main.c$229$1_0$24 ==.
                                    909 ;	main.c:229: P2=( LCD_EN | 0x03 );  /* lcd enable high */
      00013F 75 A0 43         [24]  910 	mov	_P2,#0x43
                           000142   911 	C$main.c$230$1_0$24 ==.
                                    912 ;	main.c:230: Delay(1);                /* wait more than 100us */
      000142 90 00 01         [24]  913 	mov	dptr,#0x0001
      000145 12r00r00         [24]  914 	lcall	_Delay
                           000148   915 	C$main.c$231$1_0$24 ==.
                                    916 ;	main.c:231: P2=( 0x03 );           /* lcd enable low */
      000148 75 A0 03         [24]  917 	mov	_P2,#0x03
                           00014B   918 	C$main.c$232$1_0$24 ==.
                                    919 ;	main.c:232: Delay(5);                /* wait more than 100us */
      00014B 90 00 05         [24]  920 	mov	dptr,#0x0005
      00014E 12r00r00         [24]  921 	lcall	_Delay
                           000151   922 	C$main.c$234$1_0$24 ==.
                                    923 ;	main.c:234: P2=( 0x03 );           /* lcd enable low */
      000151 75 A0 03         [24]  924 	mov	_P2,#0x03
                           000154   925 	C$main.c$235$1_0$24 ==.
                                    926 ;	main.c:235: Delay(1);                /* wait more than 100us */
      000154 90 00 01         [24]  927 	mov	dptr,#0x0001
      000157 12r00r00         [24]  928 	lcall	_Delay
                           00015A   929 	C$main.c$236$1_0$24 ==.
                                    930 ;	main.c:236: P2=( LCD_EN | 0x03 );  /* lcd enable high */
      00015A 75 A0 43         [24]  931 	mov	_P2,#0x43
                           00015D   932 	C$main.c$237$1_0$24 ==.
                                    933 ;	main.c:237: Delay(1);                /* wait more than 100us */
      00015D 90 00 01         [24]  934 	mov	dptr,#0x0001
      000160 12r00r00         [24]  935 	lcall	_Delay
                           000163   936 	C$main.c$238$1_0$24 ==.
                                    937 ;	main.c:238: P2=( 0x03 );           /* lcd enable low */
      000163 75 A0 03         [24]  938 	mov	_P2,#0x03
                           000166   939 	C$main.c$239$1_0$24 ==.
                                    940 ;	main.c:239: Delay(5);                /* wait more than 100us */
      000166 90 00 05         [24]  941 	mov	dptr,#0x0005
      000169 12r00r00         [24]  942 	lcall	_Delay
                           00016C   943 	C$main.c$241$1_0$24 ==.
                                    944 ;	main.c:241: P2=( 0x02 );           /* lcd enable low */
      00016C 75 A0 02         [24]  945 	mov	_P2,#0x02
                           00016F   946 	C$main.c$242$1_0$24 ==.
                                    947 ;	main.c:242: Delay(1);                /* wait more than 100us */
      00016F 90 00 01         [24]  948 	mov	dptr,#0x0001
      000172 12r00r00         [24]  949 	lcall	_Delay
                           000175   950 	C$main.c$243$1_0$24 ==.
                                    951 ;	main.c:243: P2=( LCD_EN | 0x02 );  /* lcd enable high */
      000175 75 A0 42         [24]  952 	mov	_P2,#0x42
                           000178   953 	C$main.c$244$1_0$24 ==.
                                    954 ;	main.c:244: Delay(1);                /* wait more than 100us */
      000178 90 00 01         [24]  955 	mov	dptr,#0x0001
      00017B 12r00r00         [24]  956 	lcall	_Delay
                           00017E   957 	C$main.c$245$1_0$24 ==.
                                    958 ;	main.c:245: P2=( 0x02 );           /* lcd enable low */
      00017E 75 A0 02         [24]  959 	mov	_P2,#0x02
                           000181   960 	C$main.c$246$1_0$24 ==.
                                    961 ;	main.c:246: Delay(5);                /* wait more than 100us */
      000181 90 00 05         [24]  962 	mov	dptr,#0x0005
      000184 12r00r00         [24]  963 	lcall	_Delay
                           000187   964 	C$main.c$248$1_0$24 ==.
                                    965 ;	main.c:248: LCD_SendCmd(0x28);   /* 4 bit mode, 1/16 duty, 5x8 font */
      000187 75 82 28         [24]  966 	mov	dpl,#0x28
      00018A 12r00r5E         [24]  967 	lcall	_LCD_SendCmd
                           00018D   968 	C$main.c$249$1_0$24 ==.
                                    969 ;	main.c:249: LCD_SendCmd(0x08);   /* display off */
      00018D 75 82 08         [24]  970 	mov	dpl,#0x08
      000190 12r00r5E         [24]  971 	lcall	_LCD_SendCmd
                           000193   972 	C$main.c$250$1_0$24 ==.
                                    973 ;	main.c:250: LCD_SendCmd(0x01);   /* display clear */
      000193 75 82 01         [24]  974 	mov	dpl,#0x01
      000196 12r00r5E         [24]  975 	lcall	_LCD_SendCmd
                           000199   976 	C$main.c$251$1_0$24 ==.
                                    977 ;	main.c:251: LCD_SendCmd(0x06);   /* entry mode */
      000199 75 82 06         [24]  978 	mov	dpl,#0x06
      00019C 12r00r5E         [24]  979 	lcall	_LCD_SendCmd
                           00019F   980 	C$main.c$252$1_0$24 ==.
                                    981 ;	main.c:252: LCD_SendCmd(0x0C);   /* display on, blinking cursor off */
      00019F 75 82 0C         [24]  982 	mov	dpl,#0x0c
      0001A2 12r00r5E         [24]  983 	lcall	_LCD_SendCmd
                           0001A5   984 	C$main.c$253$1_0$24 ==.
                                    985 ;	main.c:253: LCD_Pos=0;
      0001A5 75*07 00         [24]  986 	mov	_LCD_Pos,#0x00
                           0001A8   987 	C$main.c$254$1_0$24 ==.
                                    988 ;	main.c:254: }
                           0001A8   989 	C$main.c$254$1_0$24 ==.
                           0001A8   990 	XG$LCD_Init$0$0 ==.
      0001A8 22               [24]  991 	ret
                                    992 ;------------------------------------------------------------
                                    993 ;Allocation info for local variables in function 'putchar'
                                    994 ;------------------------------------------------------------
                                    995 ;c                         Allocated to registers r6 r7 
                                    996 ;------------------------------------------------------------
                           0001A9   997 	G$putchar$0$0 ==.
                           0001A9   998 	C$main.c$258$1_0$26 ==.
                                    999 ;	main.c:258: int putchar(int c)
                                   1000 ;	-----------------------------------------
                                   1001 ;	 function putchar
                                   1002 ;	-----------------------------------------
      0001A9                       1003 _putchar:
      0001A9 AE 82            [24] 1004 	mov	r6,dpl
      0001AB AF 83            [24] 1005 	mov	r7,dph
                           0001AD  1006 	C$main.c$260$1_0$26 ==.
                                   1007 ;	main.c:260: if(c==10)
      0001AD BE 0A 20         [24] 1008 	cjne	r6,#0x0a,00110$
      0001B0 BF 00 1D         [24] 1009 	cjne	r7,#0x00,00110$
                           0001B3  1010 	C$main.c$262$2_0$27 ==.
                                   1011 ;	main.c:262: while((LCD_Pos!=0)&&(LCD_Pos!=40))
      0001B3                       1012 00104$:
      0001B3 E5*07            [12] 1013 	mov	a,_LCD_Pos
      0001B5 60 28            [24] 1014 	jz	00111$
      0001B7 74 28            [12] 1015 	mov	a,#0x28
      0001B9 B5*07 02         [24] 1016 	cjne	a,_LCD_Pos,00137$
      0001BC 80 21            [24] 1017 	sjmp	00111$
      0001BE                       1018 00137$:
                           0001BE  1019 	C$main.c$264$3_0$28 ==.
                                   1020 ;	main.c:264: LCD_SendData(32);
      0001BE 75 82 20         [24] 1021 	mov	dpl,#0x20
      0001C1 12r00rB0         [24] 1022 	lcall	_LCD_SendData
                           0001C4  1023 	C$main.c$265$3_0$28 ==.
                                   1024 ;	main.c:265: LCD_Pos++;
      0001C4 05*07            [12] 1025 	inc	_LCD_Pos
                           0001C6  1026 	C$main.c$266$3_0$28 ==.
                                   1027 ;	main.c:266: if(LCD_Pos==80) LCD_Pos=0;
      0001C6 74 50            [12] 1028 	mov	a,#0x50
      0001C8 B5*07 E8         [24] 1029 	cjne	a,_LCD_Pos,00104$
      0001CB 75*07 00         [24] 1030 	mov	_LCD_Pos,#0x00
      0001CE 80 E3            [24] 1031 	sjmp	00104$
      0001D0                       1032 00110$:
                           0001D0  1033 	C$main.c$271$2_0$29 ==.
                                   1034 ;	main.c:271: LCD_SendData(c);
      0001D0 8E 82            [24] 1035 	mov	dpl,r6
      0001D2 12r00rB0         [24] 1036 	lcall	_LCD_SendData
                           0001D5  1037 	C$main.c$272$2_0$29 ==.
                                   1038 ;	main.c:272: LCD_Pos++;
      0001D5 05*07            [12] 1039 	inc	_LCD_Pos
                           0001D7  1040 	C$main.c$273$2_0$29 ==.
                                   1041 ;	main.c:273: if(LCD_Pos==80) LCD_Pos=0;
      0001D7 74 50            [12] 1042 	mov	a,#0x50
      0001D9 B5*07 03         [24] 1043 	cjne	a,_LCD_Pos,00111$
      0001DC 75*07 00         [24] 1044 	mov	_LCD_Pos,#0x00
      0001DF                       1045 00111$:
                           0001DF  1046 	C$main.c$275$1_0$26 ==.
                                   1047 ;	main.c:275: return 0;
      0001DF 90 00 00         [24] 1048 	mov	dptr,#0x0000
                           0001E2  1049 	C$main.c$276$1_0$26 ==.
                                   1050 ;	main.c:276: }
                           0001E2  1051 	C$main.c$276$1_0$26 ==.
                           0001E2  1052 	XG$putchar$0$0 ==.
      0001E2 22               [24] 1053 	ret
                                   1054 ;------------------------------------------------------------
                                   1055 ;Allocation info for local variables in function 'init_interrupts'
                                   1056 ;------------------------------------------------------------
                           0001E3  1057 	G$init_interrupts$0$0 ==.
                           0001E3  1058 	C$main.c$286$1_0$31 ==.
                                   1059 ;	main.c:286: void init_interrupts(void)
                                   1060 ;	-----------------------------------------
                                   1061 ;	 function init_interrupts
                                   1062 ;	-----------------------------------------
      0001E3                       1063 _init_interrupts:
                           0001E3  1064 	C$main.c$288$1_0$31 ==.
                                   1065 ;	main.c:288: TMOD=0x21;
      0001E3 75 89 21         [24] 1066 	mov	_TMOD,#0x21
                           0001E6  1067 	C$main.c$289$1_0$31 ==.
                                   1068 ;	main.c:289: TCON=0x50;
      0001E6 75 88 50         [24] 1069 	mov	_TCON,#0x50
                           0001E9  1070 	C$main.c$290$1_0$31 ==.
                                   1071 ;	main.c:290: PCON=0x80;
      0001E9 75 87 80         [24] 1072 	mov	_PCON,#0x80
                           0001EC  1073 	C$main.c$291$1_0$31 ==.
                                   1074 ;	main.c:291: TL0=(byte)NPER;
      0001EC 75 8A E6         [24] 1075 	mov	_TL0,#0xe6
                           0001EF  1076 	C$main.c$292$1_0$31 ==.
                                   1077 ;	main.c:292: TH0=(byte)(NPER >> 8);
      0001EF 75 8C BE         [24] 1078 	mov	_TH0,#0xbe
                           0001F2  1079 	C$main.c$293$1_0$31 ==.
                                   1080 ;	main.c:293: IE=0x82;
      0001F2 75 A8 82         [24] 1081 	mov	_IE,#0x82
                           0001F5  1082 	C$main.c$294$1_0$31 ==.
                                   1083 ;	main.c:294: }
                           0001F5  1084 	C$main.c$294$1_0$31 ==.
                           0001F5  1085 	XG$init_interrupts$0$0 ==.
      0001F5 22               [24] 1086 	ret
                                   1087 ;------------------------------------------------------------
                                   1088 ;Allocation info for local variables in function 'SetLedBar'
                                   1089 ;------------------------------------------------------------
                                   1090 ;n                         Allocated to registers r6 r7 
                                   1091 ;i                         Allocated to registers r5 
                                   1092 ;------------------------------------------------------------
                           0001F6  1093 	G$SetLedBar$0$0 ==.
                           0001F6  1094 	C$main.c$308$1_0$33 ==.
                                   1095 ;	main.c:308: void SetLedBar (word n)
                                   1096 ;	-----------------------------------------
                                   1097 ;	 function SetLedBar
                                   1098 ;	-----------------------------------------
      0001F6                       1099 _SetLedBar:
      0001F6 AE 82            [24] 1100 	mov	r6,dpl
      0001F8 AF 83            [24] 1101 	mov	r7,dph
                           0001FA  1102 	C$main.c$311$1_0$33 ==.
                                   1103 ;	main.c:311: LB_RCK = 0;
                                   1104 ;	assignBit
      0001FA C2 96            [12] 1105 	clr	_LB_RCK
                           0001FC  1106 	C$main.c$312$1_0$33 ==.
                                   1107 ;	main.c:312: LB_SCL = 0;
                                   1108 ;	assignBit
      0001FC C2 95            [12] 1109 	clr	_LB_SCL
                           0001FE  1110 	C$main.c$313$1_0$33 ==.
                                   1111 ;	main.c:313: LB_SCL = 1;
                                   1112 ;	assignBit
      0001FE D2 95            [12] 1113 	setb	_LB_SCL
                           000200  1114 	C$main.c$314$1_0$33 ==.
                                   1115 ;	main.c:314: LB_SCK = 0;
                                   1116 ;	assignBit
      000200 C2 94            [12] 1117 	clr	_LB_SCK
                           000202  1118 	C$main.c$316$2_0$34 ==.
                                   1119 ;	main.c:316: for (i=0; i<10; i++)
      000202 7D 00            [12] 1120 	mov	r5,#0x00
      000204                       1121 00102$:
                           000204  1122 	C$main.c$318$3_0$35 ==.
                                   1123 ;	main.c:318: LB_Data = !(n & 1);
      000204 EE               [12] 1124 	mov	a,r6
      000205 54 01            [12] 1125 	anl	a,#0x01
      000207 B4 01 00         [24] 1126 	cjne	a,#0x01,00114$
      00020A                       1127 00114$:
      00020A 92*00            [24] 1128 	mov  _SetLedBar_sloc0_1_0,c
      00020C E4               [12] 1129 	clr	a
      00020D 33               [12] 1130 	rlc	a
      00020E 24 FF            [12] 1131 	add	a,#0xff
      000210 92 93            [24] 1132 	mov	_LB_Data,c
                           000212  1133 	C$main.c$319$3_0$35 ==.
                                   1134 ;	main.c:319: n >>= 1;		// n = n >> 1
      000212 EF               [12] 1135 	mov	a,r7
      000213 C3               [12] 1136 	clr	c
      000214 13               [12] 1137 	rrc	a
      000215 CE               [12] 1138 	xch	a,r6
      000216 13               [12] 1139 	rrc	a
      000217 CE               [12] 1140 	xch	a,r6
      000218 FF               [12] 1141 	mov	r7,a
                           000219  1142 	C$main.c$320$3_0$35 ==.
                                   1143 ;	main.c:320: LB_SCK = 1;
                                   1144 ;	assignBit
      000219 D2 94            [12] 1145 	setb	_LB_SCK
                           00021B  1146 	C$main.c$321$3_0$35 ==.
                                   1147 ;	main.c:321: LB_SCK = 0;
                                   1148 ;	assignBit
      00021B C2 94            [12] 1149 	clr	_LB_SCK
                           00021D  1150 	C$main.c$316$2_0$34 ==.
                                   1151 ;	main.c:316: for (i=0; i<10; i++)
      00021D 0D               [12] 1152 	inc	r5
      00021E BD 0A 00         [24] 1153 	cjne	r5,#0x0a,00115$
      000221                       1154 00115$:
      000221 40 E1            [24] 1155 	jc	00102$
                           000223  1156 	C$main.c$323$1_0$33 ==.
                                   1157 ;	main.c:323: LB_RCK = 1;
                                   1158 ;	assignBit
      000223 D2 96            [12] 1159 	setb	_LB_RCK
                           000225  1160 	C$main.c$324$1_0$33 ==.
                                   1161 ;	main.c:324: LB_OE = 0;
                                   1162 ;	assignBit
      000225 C2 97            [12] 1163 	clr	_LB_OE
                           000227  1164 	C$main.c$325$1_0$33 ==.
                                   1165 ;	main.c:325: }
                           000227  1166 	C$main.c$325$1_0$33 ==.
                           000227  1167 	XG$SetLedBar$0$0 ==.
      000227 22               [24] 1168 	ret
                                   1169 ;------------------------------------------------------------
                                   1170 ;Allocation info for local variables in function 'GetKeyboard'
                                   1171 ;------------------------------------------------------------
                           000228  1172 	G$GetKeyboard$0$0 ==.
                           000228  1173 	C$main.c$343$1_0$37 ==.
                                   1174 ;	main.c:343: char GetKeyboard(void)
                                   1175 ;	-----------------------------------------
                                   1176 ;	 function GetKeyboard
                                   1177 ;	-----------------------------------------
      000228                       1178 _GetKeyboard:
                           000228  1179 	C$main.c$345$1_0$37 ==.
                                   1180 ;	main.c:345: P0 = 0xFF;
      000228 75 80 FF         [24] 1181 	mov	_P0,#0xff
                           00022B  1182 	C$main.c$346$1_0$37 ==.
                                   1183 ;	main.c:346: KEY_R_1 = 0;
                                   1184 ;	assignBit
      00022B C2 84            [12] 1185 	clr	_KEY_R_1
                           00022D  1186 	C$main.c$347$1_0$37 ==.
                                   1187 ;	main.c:347: Pause();
      00022D 12r00r14         [24] 1188 	lcall	_Pause
                           000230  1189 	C$main.c$348$1_0$37 ==.
                                   1190 ;	main.c:348: if (!KEY_C_1) return '1';
      000230 20 80 06         [24] 1191 	jb	_KEY_C_1,00102$
      000233 75 82 31         [24] 1192 	mov	dpl,#0x31
      000236 02r02rCF         [24] 1193 	ljmp	00133$
      000239                       1194 00102$:
                           000239  1195 	C$main.c$349$1_0$37 ==.
                                   1196 ;	main.c:349: if (!KEY_C_2) return '2';
      000239 20 81 06         [24] 1197 	jb	_KEY_C_2,00104$
      00023C 75 82 32         [24] 1198 	mov	dpl,#0x32
      00023F 02r02rCF         [24] 1199 	ljmp	00133$
      000242                       1200 00104$:
                           000242  1201 	C$main.c$350$1_0$37 ==.
                                   1202 ;	main.c:350: if (!KEY_C_3) return '3';
      000242 20 82 06         [24] 1203 	jb	_KEY_C_3,00106$
      000245 75 82 33         [24] 1204 	mov	dpl,#0x33
      000248 02r02rCF         [24] 1205 	ljmp	00133$
      00024B                       1206 00106$:
                           00024B  1207 	C$main.c$351$1_0$37 ==.
                                   1208 ;	main.c:351: if (!KEY_C_4) return 'A';
      00024B 20 83 06         [24] 1209 	jb	_KEY_C_4,00108$
      00024E 75 82 41         [24] 1210 	mov	dpl,#0x41
      000251 02r02rCF         [24] 1211 	ljmp	00133$
      000254                       1212 00108$:
                           000254  1213 	C$main.c$353$1_0$37 ==.
                                   1214 ;	main.c:353: P0 = 0xFF;
      000254 75 80 FF         [24] 1215 	mov	_P0,#0xff
                           000257  1216 	C$main.c$354$1_0$37 ==.
                                   1217 ;	main.c:354: KEY_R_2 = 0;
                                   1218 ;	assignBit
      000257 C2 85            [12] 1219 	clr	_KEY_R_2
                           000259  1220 	C$main.c$355$1_0$37 ==.
                                   1221 ;	main.c:355: Pause();
      000259 12r00r14         [24] 1222 	lcall	_Pause
                           00025C  1223 	C$main.c$356$1_0$37 ==.
                                   1224 ;	main.c:356: if (!KEY_C_1) return '4';
      00025C 20 80 05         [24] 1225 	jb	_KEY_C_1,00110$
      00025F 75 82 34         [24] 1226 	mov	dpl,#0x34
      000262 80 6B            [24] 1227 	sjmp	00133$
      000264                       1228 00110$:
                           000264  1229 	C$main.c$357$1_0$37 ==.
                                   1230 ;	main.c:357: if (!KEY_C_2) return '5';
      000264 20 81 05         [24] 1231 	jb	_KEY_C_2,00112$
      000267 75 82 35         [24] 1232 	mov	dpl,#0x35
      00026A 80 63            [24] 1233 	sjmp	00133$
      00026C                       1234 00112$:
                           00026C  1235 	C$main.c$358$1_0$37 ==.
                                   1236 ;	main.c:358: if (!KEY_C_3) return '6';
      00026C 20 82 05         [24] 1237 	jb	_KEY_C_3,00114$
      00026F 75 82 36         [24] 1238 	mov	dpl,#0x36
      000272 80 5B            [24] 1239 	sjmp	00133$
      000274                       1240 00114$:
                           000274  1241 	C$main.c$359$1_0$37 ==.
                                   1242 ;	main.c:359: if (!KEY_C_4) return 'B';
      000274 20 83 05         [24] 1243 	jb	_KEY_C_4,00116$
      000277 75 82 42         [24] 1244 	mov	dpl,#0x42
      00027A 80 53            [24] 1245 	sjmp	00133$
      00027C                       1246 00116$:
                           00027C  1247 	C$main.c$361$1_0$37 ==.
                                   1248 ;	main.c:361: P0 = 0xFF;
      00027C 75 80 FF         [24] 1249 	mov	_P0,#0xff
                           00027F  1250 	C$main.c$362$1_0$37 ==.
                                   1251 ;	main.c:362: KEY_R_3 = 0;
                                   1252 ;	assignBit
      00027F C2 86            [12] 1253 	clr	_KEY_R_3
                           000281  1254 	C$main.c$363$1_0$37 ==.
                                   1255 ;	main.c:363: Pause();
      000281 12r00r14         [24] 1256 	lcall	_Pause
                           000284  1257 	C$main.c$364$1_0$37 ==.
                                   1258 ;	main.c:364: if (!KEY_C_1) return '7';
      000284 20 80 05         [24] 1259 	jb	_KEY_C_1,00118$
      000287 75 82 37         [24] 1260 	mov	dpl,#0x37
      00028A 80 43            [24] 1261 	sjmp	00133$
      00028C                       1262 00118$:
                           00028C  1263 	C$main.c$365$1_0$37 ==.
                                   1264 ;	main.c:365: if (!KEY_C_2) return '8';
      00028C 20 81 05         [24] 1265 	jb	_KEY_C_2,00120$
      00028F 75 82 38         [24] 1266 	mov	dpl,#0x38
      000292 80 3B            [24] 1267 	sjmp	00133$
      000294                       1268 00120$:
                           000294  1269 	C$main.c$366$1_0$37 ==.
                                   1270 ;	main.c:366: if (!KEY_C_3) return '9';
      000294 20 82 05         [24] 1271 	jb	_KEY_C_3,00122$
      000297 75 82 39         [24] 1272 	mov	dpl,#0x39
      00029A 80 33            [24] 1273 	sjmp	00133$
      00029C                       1274 00122$:
                           00029C  1275 	C$main.c$367$1_0$37 ==.
                                   1276 ;	main.c:367: if (!KEY_C_4) return 'C';
      00029C 20 83 05         [24] 1277 	jb	_KEY_C_4,00124$
      00029F 75 82 43         [24] 1278 	mov	dpl,#0x43
      0002A2 80 2B            [24] 1279 	sjmp	00133$
      0002A4                       1280 00124$:
                           0002A4  1281 	C$main.c$369$1_0$37 ==.
                                   1282 ;	main.c:369: P0 = 0xFF;
      0002A4 75 80 FF         [24] 1283 	mov	_P0,#0xff
                           0002A7  1284 	C$main.c$370$1_0$37 ==.
                                   1285 ;	main.c:370: KEY_R_4 = 0;
                                   1286 ;	assignBit
      0002A7 C2 87            [12] 1287 	clr	_KEY_R_4
                           0002A9  1288 	C$main.c$371$1_0$37 ==.
                                   1289 ;	main.c:371: Pause();
      0002A9 12r00r14         [24] 1290 	lcall	_Pause
                           0002AC  1291 	C$main.c$372$1_0$37 ==.
                                   1292 ;	main.c:372: if (!KEY_C_1) return '*';
      0002AC 20 80 05         [24] 1293 	jb	_KEY_C_1,00126$
      0002AF 75 82 2A         [24] 1294 	mov	dpl,#0x2a
      0002B2 80 1B            [24] 1295 	sjmp	00133$
      0002B4                       1296 00126$:
                           0002B4  1297 	C$main.c$373$1_0$37 ==.
                                   1298 ;	main.c:373: if (!KEY_C_2) return '0';
      0002B4 20 81 05         [24] 1299 	jb	_KEY_C_2,00128$
      0002B7 75 82 30         [24] 1300 	mov	dpl,#0x30
      0002BA 80 13            [24] 1301 	sjmp	00133$
      0002BC                       1302 00128$:
                           0002BC  1303 	C$main.c$374$1_0$37 ==.
                                   1304 ;	main.c:374: if (!KEY_C_3) return '#';
      0002BC 20 82 05         [24] 1305 	jb	_KEY_C_3,00130$
      0002BF 75 82 23         [24] 1306 	mov	dpl,#0x23
      0002C2 80 0B            [24] 1307 	sjmp	00133$
      0002C4                       1308 00130$:
                           0002C4  1309 	C$main.c$375$1_0$37 ==.
                                   1310 ;	main.c:375: if (!KEY_C_4) return 'D';
      0002C4 20 83 05         [24] 1311 	jb	_KEY_C_4,00132$
      0002C7 75 82 44         [24] 1312 	mov	dpl,#0x44
      0002CA 80 03            [24] 1313 	sjmp	00133$
      0002CC                       1314 00132$:
                           0002CC  1315 	C$main.c$377$1_0$37 ==.
                                   1316 ;	main.c:377: return -1;
      0002CC 75 82 FF         [24] 1317 	mov	dpl,#0xff
      0002CF                       1318 00133$:
                           0002CF  1319 	C$main.c$378$1_0$37 ==.
                                   1320 ;	main.c:378: }
                           0002CF  1321 	C$main.c$378$1_0$37 ==.
                           0002CF  1322 	XG$GetKeyboard$0$0 ==.
      0002CF 22               [24] 1323 	ret
                                   1324 ;------------------------------------------------------------
                                   1325 ;Allocation info for local variables in function 'second'
                                   1326 ;------------------------------------------------------------
                                   1327 ;power                     Allocated with name '_second_PARM_2'
                                   1328 ;number                    Allocated to registers r6 r7 
                                   1329 ;res                       Allocated to registers r4 r5 
                                   1330 ;i                         Allocated to registers r2 r3 
                                   1331 ;------------------------------------------------------------
                           0002D0  1332 	G$second$0$0 ==.
                           0002D0  1333 	C$main.c$380$1_0$39 ==.
                                   1334 ;	main.c:380: int second(int number,int power){
                                   1335 ;	-----------------------------------------
                                   1336 ;	 function second
                                   1337 ;	-----------------------------------------
      0002D0                       1338 _second:
      0002D0 AE 82            [24] 1339 	mov	r6,dpl
      0002D2 AF 83            [24] 1340 	mov	r7,dph
                           0002D4  1341 	C$main.c$381$2_0$39 ==.
                                   1342 ;	main.c:381: int res=1;
      0002D4 7C 01            [12] 1343 	mov	r4,#0x01
      0002D6 7D 00            [12] 1344 	mov	r5,#0x00
                           0002D8  1345 	C$main.c$382$3_0$40 ==.
                                   1346 ;	main.c:382: for(int i=1;i<power;i++){
      0002D8 7A 01            [12] 1347 	mov	r2,#0x01
      0002DA 7B 00            [12] 1348 	mov	r3,#0x00
      0002DC                       1349 00103$:
      0002DC C3               [12] 1350 	clr	c
      0002DD EA               [12] 1351 	mov	a,r2
      0002DE 95*08            [12] 1352 	subb	a,_second_PARM_2
      0002E0 EB               [12] 1353 	mov	a,r3
      0002E1 64 80            [12] 1354 	xrl	a,#0x80
      0002E3 85*09 F0         [24] 1355 	mov	b,(_second_PARM_2 + 1)
      0002E6 63 F0 80         [24] 1356 	xrl	b,#0x80
      0002E9 95 F0            [12] 1357 	subb	a,b
      0002EB 50 26            [24] 1358 	jnc	00101$
                           0002ED  1359 	C$main.c$383$1_0$39 ==.
                                   1360 ;	main.c:383: res*=number;
      0002ED 8E*00            [24] 1361 	mov	__mulint_PARM_2,r6
      0002EF 8F*01            [24] 1362 	mov	(__mulint_PARM_2 + 1),r7
      0002F1 8C 82            [24] 1363 	mov	dpl,r4
      0002F3 8D 83            [24] 1364 	mov	dph,r5
      0002F5 C0 07            [24] 1365 	push	ar7
      0002F7 C0 06            [24] 1366 	push	ar6
      0002F9 C0 03            [24] 1367 	push	ar3
      0002FB C0 02            [24] 1368 	push	ar2
      0002FD 12r00r00         [24] 1369 	lcall	__mulint
      000300 AC 82            [24] 1370 	mov	r4,dpl
      000302 AD 83            [24] 1371 	mov	r5,dph
      000304 D0 02            [24] 1372 	pop	ar2
      000306 D0 03            [24] 1373 	pop	ar3
      000308 D0 06            [24] 1374 	pop	ar6
      00030A D0 07            [24] 1375 	pop	ar7
                           00030C  1376 	C$main.c$382$2_0$40 ==.
                                   1377 ;	main.c:382: for(int i=1;i<power;i++){
      00030C 0A               [12] 1378 	inc	r2
      00030D BA 00 CC         [24] 1379 	cjne	r2,#0x00,00103$
      000310 0B               [12] 1380 	inc	r3
      000311 80 C9            [24] 1381 	sjmp	00103$
      000313                       1382 00101$:
                           000313  1383 	C$main.c$385$1_0$39 ==.
                                   1384 ;	main.c:385: return res;
      000313 8C 82            [24] 1385 	mov	dpl,r4
      000315 8D 83            [24] 1386 	mov	dph,r5
                           000317  1387 	C$main.c$386$1_0$39 ==.
                                   1388 ;	main.c:386: }
                           000317  1389 	C$main.c$386$1_0$39 ==.
                           000317  1390 	XG$second$0$0 ==.
      000317 22               [24] 1391 	ret
                                   1392 ;------------------------------------------------------------
                                   1393 ;Allocation info for local variables in function 'main'
                                   1394 ;------------------------------------------------------------
                                   1395 ;bStisk                    Allocated to registers 
                                   1396 ;wx                        Allocated to registers 
                                   1397 ;buzzerTimer               Allocated to registers r6 r7 
                                   1398 ;------------------------------------------------------------
                           000318  1399 	G$main$0$0 ==.
                           000318  1400 	C$main.c$394$1_0$43 ==.
                                   1401 ;	main.c:394: void main(void)
                                   1402 ;	-----------------------------------------
                                   1403 ;	 function main
                                   1404 ;	-----------------------------------------
      000318                       1405 _main:
                           000318  1406 	C$main.c$398$1_0$43 ==.
                                   1407 ;	main.c:398: init_interrupts();
      000318 12r01rE3         [24] 1408 	lcall	_init_interrupts
                           00031B  1409 	C$main.c$399$1_0$43 ==.
                                   1410 ;	main.c:399: LCD_Init();
      00031B 12r01r12         [24] 1411 	lcall	_LCD_Init
                           00031E  1412 	C$main.c$400$1_0$43 ==.
                                   1413 ;	main.c:400: printf("7 - Stop\n");
      00031E 74r00            [12] 1414 	mov	a,#___str_0
      000320 C0 E0            [24] 1415 	push	acc
      000322 74s00            [12] 1416 	mov	a,#(___str_0 >> 8)
      000324 C0 E0            [24] 1417 	push	acc
      000326 74 80            [12] 1418 	mov	a,#0x80
      000328 C0 E0            [24] 1419 	push	acc
      00032A 12r00r00         [24] 1420 	lcall	_printf
      00032D 15 81            [12] 1421 	dec	sp
      00032F 15 81            [12] 1422 	dec	sp
      000331 15 81            [12] 1423 	dec	sp
                           000333  1424 	C$main.c$401$1_0$43 ==.
                                   1425 ;	main.c:401: printf("C - Start\n");
      000333 74r0A            [12] 1426 	mov	a,#___str_1
      000335 C0 E0            [24] 1427 	push	acc
      000337 74s00            [12] 1428 	mov	a,#(___str_1 >> 8)
      000339 C0 E0            [24] 1429 	push	acc
      00033B 74 80            [12] 1430 	mov	a,#0x80
      00033D C0 E0            [24] 1431 	push	acc
      00033F 12r00r00         [24] 1432 	lcall	_printf
      000342 15 81            [12] 1433 	dec	sp
      000344 15 81            [12] 1434 	dec	sp
      000346 15 81            [12] 1435 	dec	sp
                           000348  1436 	C$main.c$402$1_0$43 ==.
                                   1437 ;	main.c:402: run=0;
      000348 75*0C 00         [24] 1438 	mov	_run,#0x00
                           00034B  1439 	C$main.c$403$1_0$43 ==.
                                   1440 ;	main.c:403: index=3;
      00034B 75*0A 03         [24] 1441 	mov	_index,#0x03
      00034E 75*0B 00         [24] 1442 	mov	(_index + 1),#0x00
                           000351  1443 	C$main.c$404$2_0$44 ==.
                                   1444 ;	main.c:404: word buzzerTimer=0;
      000351 7E 00            [12] 1445 	mov	r6,#0x00
      000353 7F 00            [12] 1446 	mov	r7,#0x00
                           000355  1447 	C$main.c$405$1_1$44 ==.
                                   1448 ;	main.c:405: SetLedBar(second(2,2)-1);
      000355 75*08 02         [24] 1449 	mov	_second_PARM_2,#0x02
                                   1450 ;	1-genFromRTrack replaced	mov	(_second_PARM_2 + 1),#0x00
      000358 8F*09            [24] 1451 	mov	(_second_PARM_2 + 1),r7
      00035A 90 00 02         [24] 1452 	mov	dptr,#0x0002
      00035D C0 07            [24] 1453 	push	ar7
      00035F C0 06            [24] 1454 	push	ar6
      000361 12r02rD0         [24] 1455 	lcall	_second
      000364 E5 82            [12] 1456 	mov	a,dpl
      000366 85 83 F0         [24] 1457 	mov	b,dph
      000369 24 FF            [12] 1458 	add	a,#0xff
      00036B F5 82            [12] 1459 	mov	dpl,a
      00036D E5 F0            [12] 1460 	mov	a,b
      00036F 34 FF            [12] 1461 	addc	a,#0xff
      000371 F5 83            [12] 1462 	mov	dph,a
      000373 12r01rF6         [24] 1463 	lcall	_SetLedBar
      000376 D0 06            [24] 1464 	pop	ar6
      000378 D0 07            [24] 1465 	pop	ar7
                           00037A  1466 	C$main.c$406$1_1$44 ==.
                                   1467 ;	main.c:406: while(1){
      00037A                       1468 00113$:
                           00037A  1469 	C$main.c$407$2_1$45 ==.
                                   1470 ;	main.c:407: if(GetKeyboard()=='C' && run==0){
      00037A C0 07            [24] 1471 	push	ar7
      00037C C0 06            [24] 1472 	push	ar6
      00037E 12r02r28         [24] 1473 	lcall	_GetKeyboard
      000381 AD 82            [24] 1474 	mov	r5,dpl
      000383 D0 06            [24] 1475 	pop	ar6
      000385 D0 07            [24] 1476 	pop	ar7
      000387 BD 43 3F         [24] 1477 	cjne	r5,#0x43,00102$
      00038A E5*0C            [12] 1478 	mov	a,_run
      00038C 70 3B            [24] 1479 	jnz	00102$
                           00038E  1480 	C$main.c$408$3_1$46 ==.
                                   1481 ;	main.c:408: Buzzer=1;
                                   1482 ;	assignBit
      00038E D2 B6            [12] 1483 	setb	_Buzzer
                           000390  1484 	C$main.c$409$3_1$46 ==.
                                   1485 ;	main.c:409: buzzerTimer=0;
      000390 7E 00            [12] 1486 	mov	r6,#0x00
      000392 7F 00            [12] 1487 	mov	r7,#0x00
                           000394  1488 	C$main.c$410$3_1$46 ==.
                                   1489 ;	main.c:410: printf("7 - Stop\n");
      000394 C0 07            [24] 1490 	push	ar7
      000396 C0 06            [24] 1491 	push	ar6
      000398 74r00            [12] 1492 	mov	a,#___str_0
      00039A C0 E0            [24] 1493 	push	acc
      00039C 74s00            [12] 1494 	mov	a,#(___str_0 >> 8)
      00039E C0 E0            [24] 1495 	push	acc
      0003A0 74 80            [12] 1496 	mov	a,#0x80
      0003A2 C0 E0            [24] 1497 	push	acc
      0003A4 12r00r00         [24] 1498 	lcall	_printf
      0003A7 15 81            [12] 1499 	dec	sp
      0003A9 15 81            [12] 1500 	dec	sp
      0003AB 15 81            [12] 1501 	dec	sp
                           0003AD  1502 	C$main.c$411$3_1$46 ==.
                                   1503 ;	main.c:411: printf("Rotace vlny\n");
      0003AD 74r15            [12] 1504 	mov	a,#___str_2
      0003AF C0 E0            [24] 1505 	push	acc
      0003B1 74s00            [12] 1506 	mov	a,#(___str_2 >> 8)
      0003B3 C0 E0            [24] 1507 	push	acc
      0003B5 74 80            [12] 1508 	mov	a,#0x80
      0003B7 C0 E0            [24] 1509 	push	acc
      0003B9 12r00r00         [24] 1510 	lcall	_printf
      0003BC 15 81            [12] 1511 	dec	sp
      0003BE 15 81            [12] 1512 	dec	sp
      0003C0 15 81            [12] 1513 	dec	sp
      0003C2 D0 06            [24] 1514 	pop	ar6
      0003C4 D0 07            [24] 1515 	pop	ar7
                           0003C6  1516 	C$main.c$412$3_1$46 ==.
                                   1517 ;	main.c:412: run=1;
      0003C6 75*0C 01         [24] 1518 	mov	_run,#0x01
      0003C9                       1519 00102$:
                           0003C9  1520 	C$main.c$414$2_1$45 ==.
                                   1521 ;	main.c:414: if(GetKeyboard()=='7' && run==1){
      0003C9 C0 07            [24] 1522 	push	ar7
      0003CB C0 06            [24] 1523 	push	ar6
      0003CD 12r02r28         [24] 1524 	lcall	_GetKeyboard
      0003D0 AD 82            [24] 1525 	mov	r5,dpl
      0003D2 D0 06            [24] 1526 	pop	ar6
      0003D4 D0 07            [24] 1527 	pop	ar7
      0003D6 BD 37 02         [24] 1528 	cjne	r5,#0x37,00148$
      0003D9 80 03            [24] 1529 	sjmp	00149$
      0003DB                       1530 00148$:
      0003DB 02r04rA0         [24] 1531 	ljmp	00108$
      0003DE                       1532 00149$:
      0003DE 74 01            [12] 1533 	mov	a,#0x01
      0003E0 B5*0C 02         [24] 1534 	cjne	a,_run,00150$
      0003E3 80 03            [24] 1535 	sjmp	00151$
      0003E5                       1536 00150$:
      0003E5 02r04rA0         [24] 1537 	ljmp	00108$
      0003E8                       1538 00151$:
                           0003E8  1539 	C$main.c$415$3_1$47 ==.
                                   1540 ;	main.c:415: Buzzer=1;
                                   1541 ;	assignBit
      0003E8 D2 B6            [12] 1542 	setb	_Buzzer
                           0003EA  1543 	C$main.c$416$3_1$47 ==.
                                   1544 ;	main.c:416: buzzerTimer=0;
      0003EA 7E 00            [12] 1545 	mov	r6,#0x00
      0003EC 7F 00            [12] 1546 	mov	r7,#0x00
                           0003EE  1547 	C$main.c$417$3_1$47 ==.
                                   1548 ;	main.c:417: if(index<11)
      0003EE C3               [12] 1549 	clr	c
      0003EF E5*0A            [12] 1550 	mov	a,_index
      0003F1 94 0B            [12] 1551 	subb	a,#0x0b
      0003F3 E5*0B            [12] 1552 	mov	a,(_index + 1)
      0003F5 64 80            [12] 1553 	xrl	a,#0x80
      0003F7 94 80            [12] 1554 	subb	a,#0x80
      0003F9 50 3C            [24] 1555 	jnc	00105$
                           0003FB  1556 	C$main.c$418$3_1$47 ==.
                                   1557 ;	main.c:418: printf("Kombinace 0x%x\n",second(2,index)-1);
      0003FB 85*0A*08         [24] 1558 	mov	_second_PARM_2,_index
      0003FE 85*0B*09         [24] 1559 	mov	(_second_PARM_2 + 1),(_index + 1)
      000401 90 00 02         [24] 1560 	mov	dptr,#0x0002
      000404 C0 07            [24] 1561 	push	ar7
      000406 C0 06            [24] 1562 	push	ar6
      000408 12r02rD0         [24] 1563 	lcall	_second
      00040B E5 82            [12] 1564 	mov	a,dpl
      00040D 85 83 F0         [24] 1565 	mov	b,dph
      000410 24 FF            [12] 1566 	add	a,#0xff
      000412 FC               [12] 1567 	mov	r4,a
      000413 E5 F0            [12] 1568 	mov	a,b
      000415 34 FF            [12] 1569 	addc	a,#0xff
      000417 FD               [12] 1570 	mov	r5,a
      000418 C0 04            [24] 1571 	push	ar4
      00041A C0 05            [24] 1572 	push	ar5
      00041C 74r22            [12] 1573 	mov	a,#___str_3
      00041E C0 E0            [24] 1574 	push	acc
      000420 74s00            [12] 1575 	mov	a,#(___str_3 >> 8)
      000422 C0 E0            [24] 1576 	push	acc
      000424 74 80            [12] 1577 	mov	a,#0x80
      000426 C0 E0            [24] 1578 	push	acc
      000428 12r00r00         [24] 1579 	lcall	_printf
      00042B E5 81            [12] 1580 	mov	a,sp
      00042D 24 FB            [12] 1581 	add	a,#0xfb
      00042F F5 81            [12] 1582 	mov	sp,a
      000431 D0 06            [24] 1583 	pop	ar6
      000433 D0 07            [24] 1584 	pop	ar7
      000435 80 49            [24] 1585 	sjmp	00106$
      000437                       1586 00105$:
                           000437  1587 	C$main.c$420$3_1$47 ==.
                                   1588 ;	main.c:420: printf("Kombinace 0x%x\n",1023-(second(2,index-9)-1));
      000437 E5*0A            [12] 1589 	mov	a,_index
      000439 24 F7            [12] 1590 	add	a,#0xf7
      00043B F5*08            [12] 1591 	mov	_second_PARM_2,a
      00043D E5*0B            [12] 1592 	mov	a,(_index + 1)
      00043F 34 FF            [12] 1593 	addc	a,#0xff
      000441 F5*09            [12] 1594 	mov	(_second_PARM_2 + 1),a
      000443 90 00 02         [24] 1595 	mov	dptr,#0x0002
      000446 C0 07            [24] 1596 	push	ar7
      000448 C0 06            [24] 1597 	push	ar6
      00044A 12r02rD0         [24] 1598 	lcall	_second
      00044D E5 82            [12] 1599 	mov	a,dpl
      00044F 85 83 F0         [24] 1600 	mov	b,dph
      000452 24 FF            [12] 1601 	add	a,#0xff
      000454 FC               [12] 1602 	mov	r4,a
      000455 E5 F0            [12] 1603 	mov	a,b
      000457 34 FF            [12] 1604 	addc	a,#0xff
      000459 FD               [12] 1605 	mov	r5,a
      00045A 74 FF            [12] 1606 	mov	a,#0xff
      00045C C3               [12] 1607 	clr	c
      00045D 9C               [12] 1608 	subb	a,r4
      00045E FC               [12] 1609 	mov	r4,a
      00045F 74 03            [12] 1610 	mov	a,#0x03
      000461 9D               [12] 1611 	subb	a,r5
      000462 FD               [12] 1612 	mov	r5,a
      000463 C0 04            [24] 1613 	push	ar4
      000465 C0 05            [24] 1614 	push	ar5
      000467 74r22            [12] 1615 	mov	a,#___str_3
      000469 C0 E0            [24] 1616 	push	acc
      00046B 74s00            [12] 1617 	mov	a,#(___str_3 >> 8)
      00046D C0 E0            [24] 1618 	push	acc
      00046F 74 80            [12] 1619 	mov	a,#0x80
      000471 C0 E0            [24] 1620 	push	acc
      000473 12r00r00         [24] 1621 	lcall	_printf
      000476 E5 81            [12] 1622 	mov	a,sp
      000478 24 FB            [12] 1623 	add	a,#0xfb
      00047A F5 81            [12] 1624 	mov	sp,a
      00047C D0 06            [24] 1625 	pop	ar6
      00047E D0 07            [24] 1626 	pop	ar7
      000480                       1627 00106$:
                           000480  1628 	C$main.c$421$3_1$47 ==.
                                   1629 ;	main.c:421: printf("C - Start\n");
      000480 C0 07            [24] 1630 	push	ar7
      000482 C0 06            [24] 1631 	push	ar6
      000484 74r0A            [12] 1632 	mov	a,#___str_1
      000486 C0 E0            [24] 1633 	push	acc
      000488 74s00            [12] 1634 	mov	a,#(___str_1 >> 8)
      00048A C0 E0            [24] 1635 	push	acc
      00048C 74 80            [12] 1636 	mov	a,#0x80
      00048E C0 E0            [24] 1637 	push	acc
      000490 12r00r00         [24] 1638 	lcall	_printf
      000493 15 81            [12] 1639 	dec	sp
      000495 15 81            [12] 1640 	dec	sp
      000497 15 81            [12] 1641 	dec	sp
      000499 D0 06            [24] 1642 	pop	ar6
      00049B D0 07            [24] 1643 	pop	ar7
                           00049D  1644 	C$main.c$422$3_1$47 ==.
                                   1645 ;	main.c:422: run=0;
      00049D 75*0C 00         [24] 1646 	mov	_run,#0x00
      0004A0                       1647 00108$:
                           0004A0  1648 	C$main.c$424$2_1$45 ==.
                                   1649 ;	main.c:424: if(buzzerTimer==5){
      0004A0 BE 05 05         [24] 1650 	cjne	r6,#0x05,00111$
      0004A3 BF 00 02         [24] 1651 	cjne	r7,#0x00,00111$
                           0004A6  1652 	C$main.c$425$3_1$48 ==.
                                   1653 ;	main.c:425: Buzzer=0;
                                   1654 ;	assignBit
      0004A6 C2 B6            [12] 1655 	clr	_Buzzer
      0004A8                       1656 00111$:
                           0004A8  1657 	C$main.c$427$2_1$45 ==.
                                   1658 ;	main.c:427: buzzerTimer++;
      0004A8 0E               [12] 1659 	inc	r6
      0004A9 BE 00 01         [24] 1660 	cjne	r6,#0x00,00155$
      0004AC 0F               [12] 1661 	inc	r7
      0004AD                       1662 00155$:
      0004AD 02r03r7A         [24] 1663 	ljmp	00113$
                           0004B0  1664 	C$main.c$429$1_1$43 ==.
                                   1665 ;	main.c:429: }
                           0004B0  1666 	C$main.c$429$1_1$43 ==.
                           0004B0  1667 	XG$main$0$0 ==.
      0004B0 22               [24] 1668 	ret
                                   1669 ;------------------------------------------------------------
                                   1670 ;Allocation info for local variables in function 'timer0'
                                   1671 ;------------------------------------------------------------
                           0004B1  1672 	G$timer0$0$0 ==.
                           0004B1  1673 	C$main.c$437$1_1$49 ==.
                                   1674 ;	main.c:437: void timer0() __interrupt 1
                                   1675 ;	-----------------------------------------
                                   1676 ;	 function timer0
                                   1677 ;	-----------------------------------------
      0004B1                       1678 _timer0:
      0004B1 C0*00            [24] 1679 	push	bits
      0004B3 C0 E0            [24] 1680 	push	acc
      0004B5 C0 F0            [24] 1681 	push	b
      0004B7 C0 82            [24] 1682 	push	dpl
      0004B9 C0 83            [24] 1683 	push	dph
      0004BB C0 07            [24] 1684 	push	(0+7)
      0004BD C0 06            [24] 1685 	push	(0+6)
      0004BF C0 05            [24] 1686 	push	(0+5)
      0004C1 C0 04            [24] 1687 	push	(0+4)
      0004C3 C0 03            [24] 1688 	push	(0+3)
      0004C5 C0 02            [24] 1689 	push	(0+2)
      0004C7 C0 01            [24] 1690 	push	(0+1)
      0004C9 C0 00            [24] 1691 	push	(0+0)
      0004CB C0 D0            [24] 1692 	push	psw
      0004CD 75 D0 00         [24] 1693 	mov	psw,#0x00
                           0004D0  1694 	C$main.c$439$1_0$49 ==.
                                   1695 ;	main.c:439: TL0=(byte)NPER;
      0004D0 75 8A E6         [24] 1696 	mov	_TL0,#0xe6
                           0004D3  1697 	C$main.c$440$1_0$49 ==.
                                   1698 ;	main.c:440: TH0=(byte)(NPER >> 8);
      0004D3 75 8C BE         [24] 1699 	mov	_TH0,#0xbe
                           0004D6  1700 	C$main.c$441$1_0$49 ==.
                                   1701 ;	main.c:441: if(++TIMER>=300){
      0004D6 74 01            [12] 1702 	mov	a,#0x01
      0004D8 25*05            [12] 1703 	add	a,_TIMER
      0004DA FE               [12] 1704 	mov	r6,a
      0004DB E4               [12] 1705 	clr	a
      0004DC 35*06            [12] 1706 	addc	a,(_TIMER + 1)
      0004DE FF               [12] 1707 	mov	r7,a
      0004DF 8E*05            [24] 1708 	mov	_TIMER,r6
      0004E1 8F*06            [24] 1709 	mov	(_TIMER + 1),r7
      0004E3 C3               [12] 1710 	clr	c
      0004E4 EE               [12] 1711 	mov	a,r6
      0004E5 94 2C            [12] 1712 	subb	a,#0x2c
      0004E7 EF               [12] 1713 	mov	a,r7
      0004E8 94 01            [12] 1714 	subb	a,#0x01
      0004EA 50 03            [24] 1715 	jnc	00142$
      0004EC 02r05r83         [24] 1716 	ljmp	00114$
      0004EF                       1717 00142$:
                           0004EF  1718 	C$main.c$442$2_0$50 ==.
                                   1719 ;	main.c:442: if(run==1){
      0004EF 74 01            [12] 1720 	mov	a,#0x01
      0004F1 B5*0C 02         [24] 1721 	cjne	a,_run,00143$
      0004F4 80 03            [24] 1722 	sjmp	00144$
      0004F6                       1723 00143$:
      0004F6 02r05r7C         [24] 1724 	ljmp	00108$
      0004F9                       1725 00144$:
                           0004F9  1726 	C$main.c$443$3_0$51 ==.
                                   1727 ;	main.c:443: TIMER=0;
      0004F9 E4               [12] 1728 	clr	a
      0004FA F5*05            [12] 1729 	mov	_TIMER,a
      0004FC F5*06            [12] 1730 	mov	(_TIMER + 1),a
                           0004FE  1731 	C$main.c$444$3_0$51 ==.
                                   1732 ;	main.c:444: if(index <11)
      0004FE C3               [12] 1733 	clr	c
      0004FF E5*0A            [12] 1734 	mov	a,_index
      000501 94 0B            [12] 1735 	subb	a,#0x0b
      000503 E5*0B            [12] 1736 	mov	a,(_index + 1)
      000505 64 80            [12] 1737 	xrl	a,#0x80
      000507 94 80            [12] 1738 	subb	a,#0x80
      000509 50 20            [24] 1739 	jnc	00102$
                           00050B  1740 	C$main.c$445$3_0$51 ==.
                                   1741 ;	main.c:445: SetLedBar(second(2,index)-1);
      00050B 85*0A*08         [24] 1742 	mov	_second_PARM_2,_index
      00050E 85*0B*09         [24] 1743 	mov	(_second_PARM_2 + 1),(_index + 1)
      000511 90 00 02         [24] 1744 	mov	dptr,#0x0002
      000514 12r02rD0         [24] 1745 	lcall	_second
      000517 E5 82            [12] 1746 	mov	a,dpl
      000519 85 83 F0         [24] 1747 	mov	b,dph
      00051C 24 FF            [12] 1748 	add	a,#0xff
      00051E F5 82            [12] 1749 	mov	dpl,a
      000520 E5 F0            [12] 1750 	mov	a,b
      000522 34 FF            [12] 1751 	addc	a,#0xff
      000524 F5 83            [12] 1752 	mov	dph,a
      000526 12r01rF6         [24] 1753 	lcall	_SetLedBar
      000529 80 2D            [24] 1754 	sjmp	00103$
      00052B                       1755 00102$:
                           00052B  1756 	C$main.c$447$3_0$51 ==.
                                   1757 ;	main.c:447: SetLedBar(1023-(second(2,index-10)-1));
      00052B E5*0A            [12] 1758 	mov	a,_index
      00052D 24 F6            [12] 1759 	add	a,#0xf6
      00052F F5*08            [12] 1760 	mov	_second_PARM_2,a
      000531 E5*0B            [12] 1761 	mov	a,(_index + 1)
      000533 34 FF            [12] 1762 	addc	a,#0xff
      000535 F5*09            [12] 1763 	mov	(_second_PARM_2 + 1),a
      000537 90 00 02         [24] 1764 	mov	dptr,#0x0002
      00053A 12r02rD0         [24] 1765 	lcall	_second
      00053D E5 82            [12] 1766 	mov	a,dpl
      00053F 85 83 F0         [24] 1767 	mov	b,dph
      000542 24 FF            [12] 1768 	add	a,#0xff
      000544 FE               [12] 1769 	mov	r6,a
      000545 E5 F0            [12] 1770 	mov	a,b
      000547 34 FF            [12] 1771 	addc	a,#0xff
      000549 FF               [12] 1772 	mov	r7,a
      00054A 74 FF            [12] 1773 	mov	a,#0xff
      00054C C3               [12] 1774 	clr	c
      00054D 9E               [12] 1775 	subb	a,r6
      00054E F5 82            [12] 1776 	mov	dpl,a
      000550 74 03            [12] 1777 	mov	a,#0x03
      000552 9F               [12] 1778 	subb	a,r7
      000553 F5 83            [12] 1779 	mov	dph,a
      000555 12r01rF6         [24] 1780 	lcall	_SetLedBar
      000558                       1781 00103$:
                           000558  1782 	C$main.c$448$3_0$51 ==.
                                   1783 ;	main.c:448: if(index>=20)
      000558 C3               [12] 1784 	clr	c
      000559 E5*0A            [12] 1785 	mov	a,_index
      00055B 94 14            [12] 1786 	subb	a,#0x14
      00055D E5*0B            [12] 1787 	mov	a,(_index + 1)
      00055F 64 80            [12] 1788 	xrl	a,#0x80
      000561 94 80            [12] 1789 	subb	a,#0x80
      000563 40 08            [24] 1790 	jc	00105$
                           000565  1791 	C$main.c$449$3_0$51 ==.
                                   1792 ;	main.c:449: index=2;
      000565 75*0A 02         [24] 1793 	mov	_index,#0x02
      000568 75*0B 00         [24] 1794 	mov	(_index + 1),#0x00
      00056B 80 2E            [24] 1795 	sjmp	00116$
      00056D                       1796 00105$:
                           00056D  1797 	C$main.c$451$3_0$51 ==.
                                   1798 ;	main.c:451: index++;
      00056D AE*0A            [24] 1799 	mov	r6,_index
      00056F AF*0B            [24] 1800 	mov	r7,(_index + 1)
      000571 74 01            [12] 1801 	mov	a,#0x01
      000573 2E               [12] 1802 	add	a,r6
      000574 F5*0A            [12] 1803 	mov	_index,a
      000576 E4               [12] 1804 	clr	a
      000577 3F               [12] 1805 	addc	a,r7
      000578 F5*0B            [12] 1806 	mov	(_index + 1),a
      00057A 80 1F            [24] 1807 	sjmp	00116$
      00057C                       1808 00108$:
                           00057C  1809 	C$main.c$453$2_0$50 ==.
                                   1810 ;	main.c:453: TIMER=0;
      00057C E4               [12] 1811 	clr	a
      00057D F5*05            [12] 1812 	mov	_TIMER,a
      00057F F5*06            [12] 1813 	mov	(_TIMER + 1),a
      000581 80 18            [24] 1814 	sjmp	00116$
      000583                       1815 00114$:
                           000583  1816 	C$main.c$454$1_0$49 ==.
                                   1817 ;	main.c:454: }else if(TIMER==150 && run==1)
      000583 74 96            [12] 1818 	mov	a,#0x96
      000585 B5*05 06         [24] 1819 	cjne	a,_TIMER,00147$
      000588 E4               [12] 1820 	clr	a
      000589 B5*06 02         [24] 1821 	cjne	a,(_TIMER + 1),00147$
      00058C 80 02            [24] 1822 	sjmp	00148$
      00058E                       1823 00147$:
      00058E 80 0B            [24] 1824 	sjmp	00116$
      000590                       1825 00148$:
      000590 74 01            [12] 1826 	mov	a,#0x01
      000592 B5*0C 06         [24] 1827 	cjne	a,_run,00116$
                           000595  1828 	C$main.c$455$1_0$49 ==.
                                   1829 ;	main.c:455: SetLedBar(0);
      000595 90 00 00         [24] 1830 	mov	dptr,#0x0000
      000598 12r01rF6         [24] 1831 	lcall	_SetLedBar
      00059B                       1832 00116$:
                           00059B  1833 	C$main.c$456$1_0$49 ==.
                                   1834 ;	main.c:456: }
      00059B D0 D0            [24] 1835 	pop	psw
      00059D D0 00            [24] 1836 	pop	(0+0)
      00059F D0 01            [24] 1837 	pop	(0+1)
      0005A1 D0 02            [24] 1838 	pop	(0+2)
      0005A3 D0 03            [24] 1839 	pop	(0+3)
      0005A5 D0 04            [24] 1840 	pop	(0+4)
      0005A7 D0 05            [24] 1841 	pop	(0+5)
      0005A9 D0 06            [24] 1842 	pop	(0+6)
      0005AB D0 07            [24] 1843 	pop	(0+7)
      0005AD D0 83            [24] 1844 	pop	dph
      0005AF D0 82            [24] 1845 	pop	dpl
      0005B1 D0 F0            [24] 1846 	pop	b
      0005B3 D0 E0            [24] 1847 	pop	acc
      0005B5 D0*00            [24] 1848 	pop	bits
                           0005B7  1849 	C$main.c$456$1_0$49 ==.
                           0005B7  1850 	XG$timer0$0$0 ==.
      0005B7 32               [24] 1851 	reti
                                   1852 	.area CSEG    (CODE)
                                   1853 	.area CONST   (CODE)
                           000000  1854 Fmain$__str_0$0_0$0 == .
                                   1855 	.area CONST   (CODE)
      000000                       1856 ___str_0:
      000000 37 20 2D 20 53 74 6F  1857 	.ascii "7 - Stop"
             70
      000008 0A                    1858 	.db 0x0a
      000009 00                    1859 	.db 0x00
                                   1860 	.area CSEG    (CODE)
                           0005B8  1861 Fmain$__str_1$0_0$0 == .
                                   1862 	.area CONST   (CODE)
      00000A                       1863 ___str_1:
      00000A 43 20 2D 20 53 74 61  1864 	.ascii "C - Start"
             72 74
      000013 0A                    1865 	.db 0x0a
      000014 00                    1866 	.db 0x00
                                   1867 	.area CSEG    (CODE)
                           0005B8  1868 Fmain$__str_2$0_0$0 == .
                                   1869 	.area CONST   (CODE)
      000015                       1870 ___str_2:
      000015 52 6F 74 61 63 65 20  1871 	.ascii "Rotace vlny"
             76 6C 6E 79
      000020 0A                    1872 	.db 0x0a
      000021 00                    1873 	.db 0x00
                                   1874 	.area CSEG    (CODE)
                           0005B8  1875 Fmain$__str_3$0_0$0 == .
                                   1876 	.area CONST   (CODE)
      000022                       1877 ___str_3:
      000022 4B 6F 6D 62 69 6E 61  1878 	.ascii "Kombinace 0x%x"
             63 65 20 30 78 25 78
      000030 0A                    1879 	.db 0x0a
      000031 00                    1880 	.db 0x00
                                   1881 	.area CSEG    (CODE)
                                   1882 	.area XINIT   (CODE)
                                   1883 	.area CABS    (ABS,CODE)
